// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_Task_2eproto__INCLUDED
#define PROTOBUF_Task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Sensor.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace shanghai3h {
namespace protobuf {
class PressureSensorOption;
class PressureSensorOptionDefaultTypeInternal;
extern PressureSensorOptionDefaultTypeInternal _PressureSensorOption_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class SensorInfo;
class SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
class SensorInfoList;
class SensorInfoListDefaultTypeInternal;
extern SensorInfoListDefaultTypeInternal _SensorInfoList_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
class TaskInfoList;
class TaskInfoListDefaultTypeInternal;
extern TaskInfoListDefaultTypeInternal _TaskInfoList_default_instance_;
}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

namespace com {
namespace shanghai3h {
namespace protobuf {

namespace protobuf_Task_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Task_2eproto

enum TaskState {
  Standby = 0,
  Running = 1,
  Terminate = 2,
  Finish = 3,
  UnknownState = 4,
  TaskState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskState_IsValid(int value);
const TaskState TaskState_MIN = Standby;
const TaskState TaskState_MAX = UnknownState;
const int TaskState_ARRAYSIZE = TaskState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskState_descriptor();
inline const ::std::string& TaskState_Name(TaskState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskState_descriptor(), value);
}
inline bool TaskState_Parse(
    const ::std::string& name, TaskState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskState>(
    TaskState_descriptor(), name, value);
}
// ===================================================================

class TaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.TaskInfo) */ {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  static inline const TaskInfo* internal_default_instance() {
    return reinterpret_cast<const TaskInfo*>(
               &_TaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TaskInfo* other);

  // implements Message ----------------------------------------------

  inline TaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
  int sensors_size() const;
  void clear_sensors();
  static const int kSensorsFieldNumber = 7;
  const ::com::shanghai3h::protobuf::SensorInfo& sensors(int index) const;
  ::com::shanghai3h::protobuf::SensorInfo* mutable_sensors(int index);
  ::com::shanghai3h::protobuf::SensorInfo* add_sensors();
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >*
      mutable_sensors();
  const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >&
      sensors() const;

  // string taskNumber = 2;
  void clear_tasknumber();
  static const int kTaskNumberFieldNumber = 2;
  const ::std::string& tasknumber() const;
  void set_tasknumber(const ::std::string& value);
  #if LANG_CXX11
  void set_tasknumber(::std::string&& value);
  #endif
  void set_tasknumber(const char* value);
  void set_tasknumber(const char* value, size_t size);
  ::std::string* mutable_tasknumber();
  ::std::string* release_tasknumber();
  void set_allocated_tasknumber(::std::string* tasknumber);

  // string note = 3;
  void clear_note();
  static const int kNoteFieldNumber = 3;
  const ::std::string& note() const;
  void set_note(const ::std::string& value);
  #if LANG_CXX11
  void set_note(::std::string&& value);
  #endif
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  ::std::string* mutable_note();
  ::std::string* release_note();
  void set_allocated_note(::std::string* note);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 startTime = 4;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint32 starttime() const;
  void set_starttime(::google::protobuf::uint32 value);

  // uint32 endTime = 5;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  ::google::protobuf::uint32 endtime() const;
  void set_endtime(::google::protobuf::uint32 value);

  // .com.shanghai3h.protobuf.TaskState state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::com::shanghai3h::protobuf::TaskState state() const;
  void set_state(::com::shanghai3h::protobuf::TaskState value);

  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.TaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo > sensors_;
  ::google::protobuf::internal::ArenaStringPtr tasknumber_;
  ::google::protobuf::internal::ArenaStringPtr note_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  int state_;
  mutable int _cached_size_;
  friend struct protobuf_Task_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskInfoList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.TaskInfoList) */ {
 public:
  TaskInfoList();
  virtual ~TaskInfoList();

  TaskInfoList(const TaskInfoList& from);

  inline TaskInfoList& operator=(const TaskInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfoList& default_instance();

  static inline const TaskInfoList* internal_default_instance() {
    return reinterpret_cast<const TaskInfoList*>(
               &_TaskInfoList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TaskInfoList* other);

  // implements Message ----------------------------------------------

  inline TaskInfoList* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskInfoList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskInfoList& from);
  void MergeFrom(const TaskInfoList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::com::shanghai3h::protobuf::TaskInfo& list(int index) const;
  ::com::shanghai3h::protobuf::TaskInfo* mutable_list(int index);
  ::com::shanghai3h::protobuf::TaskInfo* add_list();
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.TaskInfoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo > list_;
  mutable int _cached_size_;
  friend struct protobuf_Task_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfo

// uint32 id = 1;
inline void TaskInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TaskInfo::id() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.id)
  return id_;
}
inline void TaskInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.id)
}

// string taskNumber = 2;
inline void TaskInfo::clear_tasknumber() {
  tasknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskInfo::tasknumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.taskNumber)
  return tasknumber_.GetNoArena();
}
inline void TaskInfo::set_tasknumber(const ::std::string& value) {
  
  tasknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
#if LANG_CXX11
inline void TaskInfo::set_tasknumber(::std::string&& value) {
  
  tasknumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
#endif
inline void TaskInfo::set_tasknumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tasknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
inline void TaskInfo::set_tasknumber(const char* value, size_t size) {
  
  tasknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
inline ::std::string* TaskInfo::mutable_tasknumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfo.taskNumber)
  return tasknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInfo::release_tasknumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.TaskInfo.taskNumber)
  
  return tasknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_tasknumber(::std::string* tasknumber) {
  if (tasknumber != NULL) {
    
  } else {
    
  }
  tasknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tasknumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}

// string note = 3;
inline void TaskInfo::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskInfo::note() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.note)
  return note_.GetNoArena();
}
inline void TaskInfo::set_note(const ::std::string& value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.note)
}
#if LANG_CXX11
inline void TaskInfo::set_note(::std::string&& value) {
  
  note_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.TaskInfo.note)
}
#endif
inline void TaskInfo::set_note(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.TaskInfo.note)
}
inline void TaskInfo::set_note(const char* value, size_t size) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.TaskInfo.note)
}
inline ::std::string* TaskInfo::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfo.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInfo::release_note() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.TaskInfo.note)
  
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.TaskInfo.note)
}

// uint32 startTime = 4;
inline void TaskInfo::clear_starttime() {
  starttime_ = 0u;
}
inline ::google::protobuf::uint32 TaskInfo::starttime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.startTime)
  return starttime_;
}
inline void TaskInfo::set_starttime(::google::protobuf::uint32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.startTime)
}

// uint32 endTime = 5;
inline void TaskInfo::clear_endtime() {
  endtime_ = 0u;
}
inline ::google::protobuf::uint32 TaskInfo::endtime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.endTime)
  return endtime_;
}
inline void TaskInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.endTime)
}

// .com.shanghai3h.protobuf.TaskState state = 6;
inline void TaskInfo::clear_state() {
  state_ = 0;
}
inline ::com::shanghai3h::protobuf::TaskState TaskInfo::state() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.state)
  return static_cast< ::com::shanghai3h::protobuf::TaskState >(state_);
}
inline void TaskInfo::set_state(::com::shanghai3h::protobuf::TaskState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.state)
}

// repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
inline int TaskInfo::sensors_size() const {
  return sensors_.size();
}
inline void TaskInfo::clear_sensors() {
  sensors_.Clear();
}
inline const ::com::shanghai3h::protobuf::SensorInfo& TaskInfo::sensors(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_.Get(index);
}
inline ::com::shanghai3h::protobuf::SensorInfo* TaskInfo::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_.Mutable(index);
}
inline ::com::shanghai3h::protobuf::SensorInfo* TaskInfo::add_sensors() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >*
TaskInfo::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.TaskInfo.sensors)
  return &sensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >&
TaskInfo::sensors() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_;
}

// -------------------------------------------------------------------

// TaskInfoList

// repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
inline int TaskInfoList::list_size() const {
  return list_.size();
}
inline void TaskInfoList::clear_list() {
  list_.Clear();
}
inline const ::com::shanghai3h::protobuf::TaskInfo& TaskInfoList::list(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_.Get(index);
}
inline ::com::shanghai3h::protobuf::TaskInfo* TaskInfoList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_.Mutable(index);
}
inline ::com::shanghai3h::protobuf::TaskInfo* TaskInfoList::add_list() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo >*
TaskInfoList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.TaskInfoList.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo >&
TaskInfoList::list() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::shanghai3h::protobuf::TaskState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::shanghai3h::protobuf::TaskState>() {
  return ::com::shanghai3h::protobuf::TaskState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Task_2eproto__INCLUDED
