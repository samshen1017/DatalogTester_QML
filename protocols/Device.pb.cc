// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Device.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Device.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace shanghai3h {
namespace protobuf {
class DeviceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> {
} _DeviceInfo_default_instance_;

namespace protobuf_Device_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, majorversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, minorversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, serialnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, bt_bcname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, sleeptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, lang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, diskmaxsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, diskfreespace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, bat_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, bat_remain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, cachemode_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DeviceInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Device.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _DeviceInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DeviceInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014Device.proto\022\027com.shanghai3h.protobuf\""
      "\330\002\n\nDeviceInfo\022\024\n\014deviceNumber\030\001 \001(\t\022\024\n\014"
      "majorVersion\030\002 \001(\t\022\024\n\014minorVersion\030\003 \001(\t"
      "\022\024\n\014serialNumber\030\004 \001(\t\022\021\n\tbt_BCName\030\005 \001("
      "\t\022\021\n\tsleepTime\030\006 \001(\r\022\020\n\010timeZone\030\007 \001(\005\022/"
      "\n\004lang\030\010 \001(\0162!.com.shanghai3h.protobuf.L"
      "anguage\022\023\n\013diskMaxSize\030\t \001(\r\022\025\n\rdiskFree"
      "Space\030\n \001(\r\022\021\n\tbat_total\030\020 \001(\r\022\022\n\nbat_re"
      "main\030\021 \001(\r\022\021\n\tlongitude\030\013 \001(\001\022\020\n\010latitud"
      "e\030\014 \001(\001\022\021\n\tcacheMode\030\r \001(\010*$\n\010Language\022\013"
      "\n\007Chinese\020\000\022\013\n\007English\020\001B\016B\014DeviceProbuf"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Device.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Device_2eproto

const ::google::protobuf::EnumDescriptor* Language_descriptor() {
  protobuf_Device_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Device_2eproto::file_level_enum_descriptors[0];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kDeviceNumberFieldNumber;
const int DeviceInfo::kMajorVersionFieldNumber;
const int DeviceInfo::kMinorVersionFieldNumber;
const int DeviceInfo::kSerialNumberFieldNumber;
const int DeviceInfo::kBtBCNameFieldNumber;
const int DeviceInfo::kSleepTimeFieldNumber;
const int DeviceInfo::kTimeZoneFieldNumber;
const int DeviceInfo::kLangFieldNumber;
const int DeviceInfo::kDiskMaxSizeFieldNumber;
const int DeviceInfo::kDiskFreeSpaceFieldNumber;
const int DeviceInfo::kBatTotalFieldNumber;
const int DeviceInfo::kBatRemainFieldNumber;
const int DeviceInfo::kLongitudeFieldNumber;
const int DeviceInfo::kLatitudeFieldNumber;
const int DeviceInfo::kCacheModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Device_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicenumber().size() > 0) {
    devicenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicenumber_);
  }
  majorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.majorversion().size() > 0) {
    majorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.majorversion_);
  }
  minorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.minorversion().size() > 0) {
    minorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minorversion_);
  }
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serialnumber().size() > 0) {
    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  bt_bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bt_bcname().size() > 0) {
    bt_bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bt_bcname_);
  }
  ::memcpy(&sleeptime_, &from.sleeptime_,
    reinterpret_cast<char*>(&bat_remain_) -
    reinterpret_cast<char*>(&sleeptime_) + sizeof(bat_remain_));
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  devicenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  majorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bt_bcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sleeptime_, 0, reinterpret_cast<char*>(&bat_remain_) -
    reinterpret_cast<char*>(&sleeptime_) + sizeof(bat_remain_));
  _cached_size_ = 0;
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  devicenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  majorversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minorversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bt_bcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_Device_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Device_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfo& DeviceInfo::default_instance() {
  protobuf_Device_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInfo* DeviceInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfo* n = new DeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.DeviceInfo)
  devicenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  majorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bt_bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sleeptime_, 0, reinterpret_cast<char*>(&bat_remain_) -
    reinterpret_cast<char*>(&sleeptime_) + sizeof(bat_remain_));
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicenumber().data(), this->devicenumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.DeviceInfo.deviceNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string majorVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_majorversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->majorversion().data(), this->majorversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.DeviceInfo.majorVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string minorVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minorversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->minorversion().data(), this->minorversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.DeviceInfo.minorVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serialNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serialnumber().data(), this->serialnumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.DeviceInfo.serialNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bt_BCName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bt_bcname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bt_bcname().data(), this->bt_bcname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.DeviceInfo.bt_BCName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sleepTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sleeptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeZone = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.Language lang = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lang(static_cast< ::com::shanghai3h::protobuf::Language >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 diskMaxSize = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diskmaxsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 diskFreeSpace = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diskfreespace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cacheMode = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cachemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bat_total = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bat_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bat_remain = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bat_remain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceNumber = 1;
  if (this->devicenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicenumber().data(), this->devicenumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.deviceNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicenumber(), output);
  }

  // string majorVersion = 2;
  if (this->majorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->majorversion().data(), this->majorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.majorVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->majorversion(), output);
  }

  // string minorVersion = 3;
  if (this->minorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->minorversion().data(), this->minorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.minorVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->minorversion(), output);
  }

  // string serialNumber = 4;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.serialNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serialnumber(), output);
  }

  // string bt_BCName = 5;
  if (this->bt_bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bt_bcname().data(), this->bt_bcname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.bt_BCName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bt_bcname(), output);
  }

  // uint32 sleepTime = 6;
  if (this->sleeptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sleeptime(), output);
  }

  // int32 timeZone = 7;
  if (this->timezone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timezone(), output);
  }

  // .com.shanghai3h.protobuf.Language lang = 8;
  if (this->lang() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lang(), output);
  }

  // uint32 diskMaxSize = 9;
  if (this->diskmaxsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->diskmaxsize(), output);
  }

  // uint32 diskFreeSpace = 10;
  if (this->diskfreespace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->diskfreespace(), output);
  }

  // double longitude = 11;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitude(), output);
  }

  // double latitude = 12;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->latitude(), output);
  }

  // bool cacheMode = 13;
  if (this->cachemode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->cachemode(), output);
  }

  // uint32 bat_total = 16;
  if (this->bat_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bat_total(), output);
  }

  // uint32 bat_remain = 17;
  if (this->bat_remain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bat_remain(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceNumber = 1;
  if (this->devicenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicenumber().data(), this->devicenumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.deviceNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicenumber(), target);
  }

  // string majorVersion = 2;
  if (this->majorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->majorversion().data(), this->majorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.majorVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->majorversion(), target);
  }

  // string minorVersion = 3;
  if (this->minorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->minorversion().data(), this->minorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.minorVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->minorversion(), target);
  }

  // string serialNumber = 4;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.serialNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serialnumber(), target);
  }

  // string bt_BCName = 5;
  if (this->bt_bcname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bt_bcname().data(), this->bt_bcname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.DeviceInfo.bt_BCName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bt_bcname(), target);
  }

  // uint32 sleepTime = 6;
  if (this->sleeptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sleeptime(), target);
  }

  // int32 timeZone = 7;
  if (this->timezone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timezone(), target);
  }

  // .com.shanghai3h.protobuf.Language lang = 8;
  if (this->lang() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lang(), target);
  }

  // uint32 diskMaxSize = 9;
  if (this->diskmaxsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->diskmaxsize(), target);
  }

  // uint32 diskFreeSpace = 10;
  if (this->diskfreespace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->diskfreespace(), target);
  }

  // double longitude = 11;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longitude(), target);
  }

  // double latitude = 12;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->latitude(), target);
  }

  // bool cacheMode = 13;
  if (this->cachemode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->cachemode(), target);
  }

  // uint32 bat_total = 16;
  if (this->bat_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bat_total(), target);
  }

  // uint32 bat_remain = 17;
  if (this->bat_remain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bat_remain(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.DeviceInfo)
  size_t total_size = 0;

  // string deviceNumber = 1;
  if (this->devicenumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicenumber());
  }

  // string majorVersion = 2;
  if (this->majorversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->majorversion());
  }

  // string minorVersion = 3;
  if (this->minorversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->minorversion());
  }

  // string serialNumber = 4;
  if (this->serialnumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serialnumber());
  }

  // string bt_BCName = 5;
  if (this->bt_bcname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bt_bcname());
  }

  // uint32 sleepTime = 6;
  if (this->sleeptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sleeptime());
  }

  // int32 timeZone = 7;
  if (this->timezone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timezone());
  }

  // .com.shanghai3h.protobuf.Language lang = 8;
  if (this->lang() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lang());
  }

  // uint32 diskMaxSize = 9;
  if (this->diskmaxsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->diskmaxsize());
  }

  // double longitude = 11;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // uint32 diskFreeSpace = 10;
  if (this->diskfreespace() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->diskfreespace());
  }

  // bool cacheMode = 13;
  if (this->cachemode() != 0) {
    total_size += 1 + 1;
  }

  // double latitude = 12;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // uint32 bat_total = 16;
  if (this->bat_total() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bat_total());
  }

  // uint32 bat_remain = 17;
  if (this->bat_remain() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bat_remain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicenumber().size() > 0) {

    devicenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicenumber_);
  }
  if (from.majorversion().size() > 0) {

    majorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.majorversion_);
  }
  if (from.minorversion().size() > 0) {

    minorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minorversion_);
  }
  if (from.serialnumber().size() > 0) {

    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  if (from.bt_bcname().size() > 0) {

    bt_bcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bt_bcname_);
  }
  if (from.sleeptime() != 0) {
    set_sleeptime(from.sleeptime());
  }
  if (from.timezone() != 0) {
    set_timezone(from.timezone());
  }
  if (from.lang() != 0) {
    set_lang(from.lang());
  }
  if (from.diskmaxsize() != 0) {
    set_diskmaxsize(from.diskmaxsize());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.diskfreespace() != 0) {
    set_diskfreespace(from.diskfreespace());
  }
  if (from.cachemode() != 0) {
    set_cachemode(from.cachemode());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.bat_total() != 0) {
    set_bat_total(from.bat_total());
  }
  if (from.bat_remain() != 0) {
    set_bat_remain(from.bat_remain());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  devicenumber_.Swap(&other->devicenumber_);
  majorversion_.Swap(&other->majorversion_);
  minorversion_.Swap(&other->minorversion_);
  serialnumber_.Swap(&other->serialnumber_);
  bt_bcname_.Swap(&other->bt_bcname_);
  std::swap(sleeptime_, other->sleeptime_);
  std::swap(timezone_, other->timezone_);
  std::swap(lang_, other->lang_);
  std::swap(diskmaxsize_, other->diskmaxsize_);
  std::swap(longitude_, other->longitude_);
  std::swap(diskfreespace_, other->diskfreespace_);
  std::swap(cachemode_, other->cachemode_);
  std::swap(latitude_, other->latitude_);
  std::swap(bat_total_, other->bat_total_);
  std::swap(bat_remain_, other->bat_remain_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_Device_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Device_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfo

// string deviceNumber = 1;
void DeviceInfo::clear_devicenumber() {
  devicenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::devicenumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
  return devicenumber_.GetNoArena();
}
void DeviceInfo::set_devicenumber(const ::std::string& value) {
  
  devicenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
#if LANG_CXX11
void DeviceInfo::set_devicenumber(::std::string&& value) {
  
  devicenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
#endif
void DeviceInfo::set_devicenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
void DeviceInfo::set_devicenumber(const char* value, size_t size) {
  
  devicenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
::std::string* DeviceInfo::mutable_devicenumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
  return devicenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_devicenumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
  
  return devicenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_devicenumber(::std::string* devicenumber) {
  if (devicenumber != NULL) {
    
  } else {
    
  }
  devicenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicenumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}

// string majorVersion = 2;
void DeviceInfo::clear_majorversion() {
  majorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::majorversion() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
  return majorversion_.GetNoArena();
}
void DeviceInfo::set_majorversion(const ::std::string& value) {
  
  majorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
#if LANG_CXX11
void DeviceInfo::set_majorversion(::std::string&& value) {
  
  majorversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
#endif
void DeviceInfo::set_majorversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  majorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
void DeviceInfo::set_majorversion(const char* value, size_t size) {
  
  majorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
::std::string* DeviceInfo::mutable_majorversion() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
  return majorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_majorversion() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
  
  return majorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_majorversion(::std::string* majorversion) {
  if (majorversion != NULL) {
    
  } else {
    
  }
  majorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), majorversion);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}

// string minorVersion = 3;
void DeviceInfo::clear_minorversion() {
  minorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::minorversion() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
  return minorversion_.GetNoArena();
}
void DeviceInfo::set_minorversion(const ::std::string& value) {
  
  minorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
#if LANG_CXX11
void DeviceInfo::set_minorversion(::std::string&& value) {
  
  minorversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
#endif
void DeviceInfo::set_minorversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  minorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
void DeviceInfo::set_minorversion(const char* value, size_t size) {
  
  minorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
::std::string* DeviceInfo::mutable_minorversion() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
  return minorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_minorversion() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
  
  return minorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_minorversion(::std::string* minorversion) {
  if (minorversion != NULL) {
    
  } else {
    
  }
  minorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), minorversion);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}

// string serialNumber = 4;
void DeviceInfo::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::serialnumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
  return serialnumber_.GetNoArena();
}
void DeviceInfo::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
#if LANG_CXX11
void DeviceInfo::set_serialnumber(::std::string&& value) {
  
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
#endif
void DeviceInfo::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
void DeviceInfo::set_serialnumber(const char* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
::std::string* DeviceInfo::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_serialnumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}

// string bt_BCName = 5;
void DeviceInfo::clear_bt_bcname() {
  bt_bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceInfo::bt_bcname() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
  return bt_bcname_.GetNoArena();
}
void DeviceInfo::set_bt_bcname(const ::std::string& value) {
  
  bt_bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
#if LANG_CXX11
void DeviceInfo::set_bt_bcname(::std::string&& value) {
  
  bt_bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
#endif
void DeviceInfo::set_bt_bcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bt_bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
void DeviceInfo::set_bt_bcname(const char* value, size_t size) {
  
  bt_bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
::std::string* DeviceInfo::mutable_bt_bcname() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
  return bt_bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_bt_bcname() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
  
  return bt_bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_bt_bcname(::std::string* bt_bcname) {
  if (bt_bcname != NULL) {
    
  } else {
    
  }
  bt_bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bt_bcname);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}

// uint32 sleepTime = 6;
void DeviceInfo::clear_sleeptime() {
  sleeptime_ = 0u;
}
::google::protobuf::uint32 DeviceInfo::sleeptime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.sleepTime)
  return sleeptime_;
}
void DeviceInfo::set_sleeptime(::google::protobuf::uint32 value) {
  
  sleeptime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.sleepTime)
}

// int32 timeZone = 7;
void DeviceInfo::clear_timezone() {
  timezone_ = 0;
}
::google::protobuf::int32 DeviceInfo::timezone() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.timeZone)
  return timezone_;
}
void DeviceInfo::set_timezone(::google::protobuf::int32 value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.timeZone)
}

// .com.shanghai3h.protobuf.Language lang = 8;
void DeviceInfo::clear_lang() {
  lang_ = 0;
}
::com::shanghai3h::protobuf::Language DeviceInfo::lang() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.lang)
  return static_cast< ::com::shanghai3h::protobuf::Language >(lang_);
}
void DeviceInfo::set_lang(::com::shanghai3h::protobuf::Language value) {
  
  lang_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.lang)
}

// uint32 diskMaxSize = 9;
void DeviceInfo::clear_diskmaxsize() {
  diskmaxsize_ = 0u;
}
::google::protobuf::uint32 DeviceInfo::diskmaxsize() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.diskMaxSize)
  return diskmaxsize_;
}
void DeviceInfo::set_diskmaxsize(::google::protobuf::uint32 value) {
  
  diskmaxsize_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.diskMaxSize)
}

// uint32 diskFreeSpace = 10;
void DeviceInfo::clear_diskfreespace() {
  diskfreespace_ = 0u;
}
::google::protobuf::uint32 DeviceInfo::diskfreespace() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.diskFreeSpace)
  return diskfreespace_;
}
void DeviceInfo::set_diskfreespace(::google::protobuf::uint32 value) {
  
  diskfreespace_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.diskFreeSpace)
}

// uint32 bat_total = 16;
void DeviceInfo::clear_bat_total() {
  bat_total_ = 0u;
}
::google::protobuf::uint32 DeviceInfo::bat_total() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.bat_total)
  return bat_total_;
}
void DeviceInfo::set_bat_total(::google::protobuf::uint32 value) {
  
  bat_total_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.bat_total)
}

// uint32 bat_remain = 17;
void DeviceInfo::clear_bat_remain() {
  bat_remain_ = 0u;
}
::google::protobuf::uint32 DeviceInfo::bat_remain() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.bat_remain)
  return bat_remain_;
}
void DeviceInfo::set_bat_remain(::google::protobuf::uint32 value) {
  
  bat_remain_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.bat_remain)
}

// double longitude = 11;
void DeviceInfo::clear_longitude() {
  longitude_ = 0;
}
double DeviceInfo::longitude() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.longitude)
  return longitude_;
}
void DeviceInfo::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.longitude)
}

// double latitude = 12;
void DeviceInfo::clear_latitude() {
  latitude_ = 0;
}
double DeviceInfo::latitude() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.latitude)
  return latitude_;
}
void DeviceInfo::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.latitude)
}

// bool cacheMode = 13;
void DeviceInfo::clear_cachemode() {
  cachemode_ = false;
}
bool DeviceInfo::cachemode() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.cacheMode)
  return cachemode_;
}
void DeviceInfo::set_cachemode(bool value) {
  
  cachemode_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.cacheMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

// @@protoc_insertion_point(global_scope)
