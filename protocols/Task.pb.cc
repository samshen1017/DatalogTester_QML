// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace shanghai3h {
namespace protobuf {
class TaskInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TaskInfo> {
} _TaskInfo_default_instance_;
class TaskInfoListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TaskInfoList> {
} _TaskInfoList_default_instance_;

namespace protobuf_Task_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, tasknumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, note_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, sensors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoList, list_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TaskInfo)},
  { 12, -1, sizeof(TaskInfoList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskInfoList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Task.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TaskInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TaskInfoList_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::shanghai3h::protobuf::protobuf_Sensor_2eproto::InitDefaults();
  _TaskInfo_default_instance_.DefaultConstruct();
  _TaskInfoList_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nTask.proto\022\027com.shanghai3h.protobuf\032\014S"
      "ensor.proto\"\305\001\n\010TaskInfo\022\n\n\002id\030\001 \001(\r\022\022\n\n"
      "taskNumber\030\002 \001(\t\022\014\n\004note\030\003 \001(\t\022\021\n\tstartT"
      "ime\030\004 \001(\r\022\017\n\007endTime\030\005 \001(\r\0221\n\005state\030\006 \001("
      "\0162\".com.shanghai3h.protobuf.TaskState\0224\n"
      "\007sensors\030\007 \003(\0132#.com.shanghai3h.protobuf"
      ".SensorInfo\"\?\n\014TaskInfoList\022/\n\004list\030\001 \003("
      "\0132!.com.shanghai3h.protobuf.TaskInfo*R\n\t"
      "TaskState\022\013\n\007Standby\020\000\022\013\n\007Running\020\001\022\r\n\tT"
      "erminate\020\002\022\n\n\006Finish\020\003\022\020\n\014UnknownState\020\004"
      "B\014B\nTaskProbufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Task.proto", &protobuf_RegisterTypes);
  ::com::shanghai3h::protobuf::protobuf_Sensor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Task_2eproto

const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_enum_descriptors[0];
}
bool TaskState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfo::kIdFieldNumber;
const int TaskInfo::kTaskNumberFieldNumber;
const int TaskInfo::kNoteFieldNumber;
const int TaskInfo::kStartTimeFieldNumber;
const int TaskInfo::kEndTimeFieldNumber;
const int TaskInfo::kStateFieldNumber;
const int TaskInfo::kSensorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfo::TaskInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Task_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensors_(from.sensors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tasknumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tasknumber().size() > 0) {
    tasknumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tasknumber_);
  }
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.note().size() > 0) {
    note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.TaskInfo)
}

void TaskInfo::SharedCtor() {
  tasknumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_) + sizeof(state_));
  _cached_size_ = 0;
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  tasknumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskInfo& TaskInfo::default_instance() {
  protobuf_Task_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskInfo* TaskInfo::New(::google::protobuf::Arena* arena) const {
  TaskInfo* n = new TaskInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.TaskInfo)
  sensors_.Clear();
  tasknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_) + sizeof(state_));
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.TaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string taskNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tasknumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tasknumber().data(), this->tasknumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.TaskInfo.taskNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string note = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.TaskInfo.note"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 startTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 endTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.TaskState state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::com::shanghai3h::protobuf::TaskState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.TaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.TaskInfo)
  return false;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // string taskNumber = 2;
  if (this->tasknumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tasknumber().data(), this->tasknumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.TaskInfo.taskNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tasknumber(), output);
  }

  // string note = 3;
  if (this->note().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.TaskInfo.note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->note(), output);
  }

  // uint32 startTime = 4;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttime(), output);
  }

  // uint32 endTime = 5;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // .com.shanghai3h.protobuf.TaskState state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sensors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.TaskInfo)
}

::google::protobuf::uint8* TaskInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // string taskNumber = 2;
  if (this->tasknumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tasknumber().data(), this->tasknumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.TaskInfo.taskNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tasknumber(), target);
  }

  // string note = 3;
  if (this->note().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.TaskInfo.note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->note(), target);
  }

  // uint32 startTime = 4;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttime(), target);
  }

  // uint32 endTime = 5;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // .com.shanghai3h.protobuf.TaskState state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->sensors(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.TaskInfo)
  size_t total_size = 0;

  // repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
  {
    unsigned int count = this->sensors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors(i));
    }
  }

  // string taskNumber = 2;
  if (this->tasknumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tasknumber());
  }

  // string note = 3;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->note());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 startTime = 4;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->starttime());
  }

  // uint32 endTime = 5;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  // .com.shanghai3h.protobuf.TaskState state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.TaskInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.TaskInfo)
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  if (from.tasknumber().size() > 0) {

    tasknumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tasknumber_);
  }
  if (from.note().size() > 0) {

    note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfo::InternalSwap(TaskInfo* other) {
  sensors_.InternalSwap(&other->sensors_);
  tasknumber_.Swap(&other->tasknumber_);
  note_.Swap(&other->note_);
  std::swap(id_, other->id_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfo

// uint32 id = 1;
void TaskInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 TaskInfo::id() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.id)
  return id_;
}
void TaskInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.id)
}

// string taskNumber = 2;
void TaskInfo::clear_tasknumber() {
  tasknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfo::tasknumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.taskNumber)
  return tasknumber_.GetNoArena();
}
void TaskInfo::set_tasknumber(const ::std::string& value) {
  
  tasknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
#if LANG_CXX11
void TaskInfo::set_tasknumber(::std::string&& value) {
  
  tasknumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
#endif
void TaskInfo::set_tasknumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tasknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
void TaskInfo::set_tasknumber(const char* value, size_t size) {
  
  tasknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}
::std::string* TaskInfo::mutable_tasknumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfo.taskNumber)
  return tasknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfo::release_tasknumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.TaskInfo.taskNumber)
  
  return tasknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfo::set_allocated_tasknumber(::std::string* tasknumber) {
  if (tasknumber != NULL) {
    
  } else {
    
  }
  tasknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tasknumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.TaskInfo.taskNumber)
}

// string note = 3;
void TaskInfo::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfo::note() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.note)
  return note_.GetNoArena();
}
void TaskInfo::set_note(const ::std::string& value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.note)
}
#if LANG_CXX11
void TaskInfo::set_note(::std::string&& value) {
  
  note_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.TaskInfo.note)
}
#endif
void TaskInfo::set_note(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.TaskInfo.note)
}
void TaskInfo::set_note(const char* value, size_t size) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.TaskInfo.note)
}
::std::string* TaskInfo::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfo.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfo::release_note() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.TaskInfo.note)
  
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfo::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.TaskInfo.note)
}

// uint32 startTime = 4;
void TaskInfo::clear_starttime() {
  starttime_ = 0u;
}
::google::protobuf::uint32 TaskInfo::starttime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.startTime)
  return starttime_;
}
void TaskInfo::set_starttime(::google::protobuf::uint32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.startTime)
}

// uint32 endTime = 5;
void TaskInfo::clear_endtime() {
  endtime_ = 0u;
}
::google::protobuf::uint32 TaskInfo::endtime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.endTime)
  return endtime_;
}
void TaskInfo::set_endtime(::google::protobuf::uint32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.endTime)
}

// .com.shanghai3h.protobuf.TaskState state = 6;
void TaskInfo::clear_state() {
  state_ = 0;
}
::com::shanghai3h::protobuf::TaskState TaskInfo::state() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.state)
  return static_cast< ::com::shanghai3h::protobuf::TaskState >(state_);
}
void TaskInfo::set_state(::com::shanghai3h::protobuf::TaskState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.TaskInfo.state)
}

// repeated .com.shanghai3h.protobuf.SensorInfo sensors = 7;
int TaskInfo::sensors_size() const {
  return sensors_.size();
}
void TaskInfo::clear_sensors() {
  sensors_.Clear();
}
const ::com::shanghai3h::protobuf::SensorInfo& TaskInfo::sensors(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_.Get(index);
}
::com::shanghai3h::protobuf::SensorInfo* TaskInfo::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_.Mutable(index);
}
::com::shanghai3h::protobuf::SensorInfo* TaskInfo::add_sensors() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >*
TaskInfo::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.TaskInfo.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >&
TaskInfo::sensors() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.TaskInfo.sensors)
  return sensors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfoList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfoList::TaskInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Task_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.TaskInfoList)
}
TaskInfoList::TaskInfoList(const TaskInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      list_(from.list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.TaskInfoList)
}

void TaskInfoList::SharedCtor() {
  _cached_size_ = 0;
}

TaskInfoList::~TaskInfoList() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.TaskInfoList)
  SharedDtor();
}

void TaskInfoList::SharedDtor() {
}

void TaskInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfoList::descriptor() {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskInfoList& TaskInfoList::default_instance() {
  protobuf_Task_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskInfoList* TaskInfoList::New(::google::protobuf::Arena* arena) const {
  TaskInfoList* n = new TaskInfoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.TaskInfoList)
  list_.Clear();
}

bool TaskInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.TaskInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.TaskInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.TaskInfoList)
  return false;
#undef DO_
}

void TaskInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.TaskInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.TaskInfoList)
}

::google::protobuf::uint8* TaskInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.TaskInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.TaskInfoList)
  return target;
}

size_t TaskInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.TaskInfoList)
  size_t total_size = 0;

  // repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.TaskInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.TaskInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.TaskInfoList)
    MergeFrom(*source);
  }
}

void TaskInfoList::MergeFrom(const TaskInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.TaskInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void TaskInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.TaskInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfoList::CopyFrom(const TaskInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.TaskInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfoList::IsInitialized() const {
  return true;
}

void TaskInfoList::Swap(TaskInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfoList::InternalSwap(TaskInfoList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskInfoList::GetMetadata() const {
  protobuf_Task_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Task_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfoList

// repeated .com.shanghai3h.protobuf.TaskInfo list = 1;
int TaskInfoList::list_size() const {
  return list_.size();
}
void TaskInfoList::clear_list() {
  list_.Clear();
}
const ::com::shanghai3h::protobuf::TaskInfo& TaskInfoList::list(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_.Get(index);
}
::com::shanghai3h::protobuf::TaskInfo* TaskInfoList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_.Mutable(index);
}
::com::shanghai3h::protobuf::TaskInfo* TaskInfoList::add_list() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo >*
TaskInfoList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.TaskInfoList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::TaskInfo >&
TaskInfoList::list() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.TaskInfoList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

// @@protoc_insertion_point(global_scope)
