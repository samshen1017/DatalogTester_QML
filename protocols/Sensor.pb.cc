// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace shanghai3h {
namespace protobuf {
class SensorInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SensorInfo> {
  public:
  const ::com::shanghai3h::protobuf::PressureSensorOption* press_opt_;
} _SensorInfo_default_instance_;
class PressureSensorOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PressureSensorOption> {
} _PressureSensorOption_default_instance_;
class SensorDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SensorData> {
} _SensorData_default_instance_;
class SensorInfoListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SensorInfoList> {
} _SensorInfoList_default_instance_;

namespace protobuf_Sensor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, drv_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, sensorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, partnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, rawcount_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SensorInfo_default_instance_), press_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfo, option_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensorOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensorOption, coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensorOption, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensorOption, rangemax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensorOption, rangemin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureSensorOption, unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorInfoList, list_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SensorInfo)},
  { 14, -1, sizeof(PressureSensorOption)},
  { 24, -1, sizeof(SensorData)},
  { 31, -1, sizeof(SensorInfoList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PressureSensorOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorInfoList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Sensor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _SensorInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PressureSensorOption_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SensorData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SensorInfoList_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SensorInfo_default_instance_.DefaultConstruct();
  _PressureSensorOption_default_instance_.DefaultConstruct();
  _SensorData_default_instance_.DefaultConstruct();
  _SensorInfoList_default_instance_.DefaultConstruct();
  _SensorInfo_default_instance_.press_opt_ = const_cast< ::com::shanghai3h::protobuf::PressureSensorOption*>(
      ::com::shanghai3h::protobuf::PressureSensorOption::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014Sensor.proto\022\027com.shanghai3h.protobuf\""
      "\242\002\n\nSensorInfo\022\n\n\002id\030\001 \001(\r\0221\n\004type\030\002 \001(\016"
      "2#.com.shanghai3h.protobuf.SensorType\022;\n"
      "\010drv_type\030\003 \001(\0162).com.shanghai3h.protobu"
      "f.SensorDriverType\022\022\n\nsensorName\030\004 \001(\t\022\022"
      "\n\npartNumber\030\005 \001(\t\022\020\n\010interval\030\007 \001(\r\022\020\n\010"
      "rawCount\030\010 \001(\r\022B\n\tpress_opt\030\006 \001(\0132-.com."
      "shanghai3h.protobuf.PressureSensorOption"
      "H\000B\010\n\006option\"\224\001\n\024PressureSensorOption\022\023\n"
      "\013coefficient\030\001 \001(\005\022\016\n\006offset\030\002 \001(\005\022\020\n\010ra"
      "ngeMax\030\003 \001(\005\022\020\n\010rangeMin\030\004 \001(\005\0223\n\004unit\030\010"
      " \001(\0162%.com.shanghai3h.protobuf.PressureU"
      "nit\")\n\nSensorData\022\014\n\004size\030\001 \001(\005\022\r\n\005value"
      "\030\002 \003(\005\"C\n\016SensorInfoList\0221\n\004list\030\001 \003(\0132#"
      ".com.shanghai3h.protobuf.SensorInfo*:\n\014P"
      "ressureUnit\022\006\n\002Pa\020\000\022\007\n\003KPa\020\001\022\007\n\003MPa\020\002\022\007\n"
      "\003bar\020\003\022\007\n\003psi\020\004*!\n\nSensorType\022\023\n\017Sensor_"
      "ZSC31014\020\000*\261\001\n\020SensorDriverType\022\017\n\013Senso"
      "r_I2C0\020\000\022\017\n\013Sensor_I2C1\020\001\022\017\n\013Sersor_I2C3"
      "\020\002\022\017\n\013Sensor_SPI0\020\003\022\017\n\013Sensor_SPI1\020\004\022\017\n\013"
      "Sensor_USB0\020\005\022\017\n\013Sensor_USB1\020\006\022\022\n\016Sensor"
      "_Serial0\020\007\022\022\n\016Sensor_Serial1\020\010B\016B\014Sensor"
      "Probufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 894);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Sensor.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Sensor_2eproto

const ::google::protobuf::EnumDescriptor* PressureUnit_descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_enum_descriptors[0];
}
bool PressureUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SensorType_descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_enum_descriptors[1];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SensorDriverType_descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_enum_descriptors[2];
}
bool SensorDriverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInfo::kIdFieldNumber;
const int SensorInfo::kTypeFieldNumber;
const int SensorInfo::kDrvTypeFieldNumber;
const int SensorInfo::kSensorNameFieldNumber;
const int SensorInfo::kPartNumberFieldNumber;
const int SensorInfo::kIntervalFieldNumber;
const int SensorInfo::kRawCountFieldNumber;
const int SensorInfo::kPressOptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInfo::SensorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Sensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensorname().size() > 0) {
    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
  partnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partnumber().size() > 0) {
    partnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partnumber_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&rawcount_) -
    reinterpret_cast<char*>(&id_) + sizeof(rawcount_));
  clear_has_option();
  switch (from.option_case()) {
    case kPressOpt: {
      mutable_press_opt()->::com::shanghai3h::protobuf::PressureSensorOption::MergeFrom(from.press_opt());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.SensorInfo)
}

void SensorInfo::SharedCtor() {
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&rawcount_) -
    reinterpret_cast<char*>(&id_) + sizeof(rawcount_));
  clear_has_option();
  _cached_size_ = 0;
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.SensorInfo)
  SharedDtor();
}

void SensorInfo::SharedDtor() {
  sensorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_option()) {
    clear_option();
  }
}

void SensorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorInfo::descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInfo& SensorInfo::default_instance() {
  protobuf_Sensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorInfo* SensorInfo::New(::google::protobuf::Arena* arena) const {
  SensorInfo* n = new SensorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorInfo::clear_option() {
// @@protoc_insertion_point(one_of_clear_start:com.shanghai3h.protobuf.SensorInfo)
  switch (option_case()) {
    case kPressOpt: {
      delete option_.press_opt_;
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.SensorInfo)
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&rawcount_) -
    reinterpret_cast<char*>(&id_) + sizeof(rawcount_));
  clear_option();
}

bool SensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.SensorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.SensorType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::shanghai3h::protobuf::SensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.SensorDriverType drv_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drv_type(static_cast< ::com::shanghai3h::protobuf::SensorDriverType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sensorName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.SensorInfo.sensorName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partNumber = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partnumber().data(), this->partnumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.shanghai3h.protobuf.SensorInfo.partNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.PressureSensorOption press_opt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_press_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 interval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rawCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rawcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.SensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.SensorInfo)
  return false;
#undef DO_
}

void SensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .com.shanghai3h.protobuf.SensorType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .com.shanghai3h.protobuf.SensorDriverType drv_type = 3;
  if (this->drv_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->drv_type(), output);
  }

  // string sensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.SensorInfo.sensorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sensorname(), output);
  }

  // string partNumber = 5;
  if (this->partnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partnumber().data(), this->partnumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.SensorInfo.partNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->partnumber(), output);
  }

  // .com.shanghai3h.protobuf.PressureSensorOption press_opt = 6;
  if (has_press_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *option_.press_opt_, output);
  }

  // uint32 interval = 7;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->interval(), output);
  }

  // uint32 rawCount = 8;
  if (this->rawcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rawcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.SensorInfo)
}

::google::protobuf::uint8* SensorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .com.shanghai3h.protobuf.SensorType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .com.shanghai3h.protobuf.SensorDriverType drv_type = 3;
  if (this->drv_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->drv_type(), target);
  }

  // string sensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.SensorInfo.sensorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensorname(), target);
  }

  // string partNumber = 5;
  if (this->partnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partnumber().data(), this->partnumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.shanghai3h.protobuf.SensorInfo.partNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->partnumber(), target);
  }

  // .com.shanghai3h.protobuf.PressureSensorOption press_opt = 6;
  if (has_press_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *option_.press_opt_, deterministic, target);
  }

  // uint32 interval = 7;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->interval(), target);
  }

  // uint32 rawCount = 8;
  if (this->rawcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rawcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.SensorInfo)
  size_t total_size = 0;

  // string sensorName = 4;
  if (this->sensorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorname());
  }

  // string partNumber = 5;
  if (this->partnumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partnumber());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .com.shanghai3h.protobuf.SensorType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .com.shanghai3h.protobuf.SensorDriverType drv_type = 3;
  if (this->drv_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drv_type());
  }

  // uint32 interval = 7;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interval());
  }

  // uint32 rawCount = 8;
  if (this->rawcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rawcount());
  }

  switch (option_case()) {
    // .com.shanghai3h.protobuf.PressureSensorOption press_opt = 6;
    case kPressOpt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *option_.press_opt_);
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.SensorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.SensorInfo)
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensorname().size() > 0) {

    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
  if (from.partnumber().size() > 0) {

    partnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partnumber_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.drv_type() != 0) {
    set_drv_type(from.drv_type());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.rawcount() != 0) {
    set_rawcount(from.rawcount());
  }
  switch (from.option_case()) {
    case kPressOpt: {
      mutable_press_opt()->::com::shanghai3h::protobuf::PressureSensorOption::MergeFrom(from.press_opt());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void SensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::Swap(SensorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInfo::InternalSwap(SensorInfo* other) {
  sensorname_.Swap(&other->sensorname_);
  partnumber_.Swap(&other->partnumber_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(drv_type_, other->drv_type_);
  std::swap(interval_, other->interval_);
  std::swap(rawcount_, other->rawcount_);
  std::swap(option_, other->option_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorInfo::GetMetadata() const {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorInfo

// uint32 id = 1;
void SensorInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 SensorInfo::id() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.id)
  return id_;
}
void SensorInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.id)
}

// .com.shanghai3h.protobuf.SensorType type = 2;
void SensorInfo::clear_type() {
  type_ = 0;
}
::com::shanghai3h::protobuf::SensorType SensorInfo::type() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.type)
  return static_cast< ::com::shanghai3h::protobuf::SensorType >(type_);
}
void SensorInfo::set_type(::com::shanghai3h::protobuf::SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.type)
}

// .com.shanghai3h.protobuf.SensorDriverType drv_type = 3;
void SensorInfo::clear_drv_type() {
  drv_type_ = 0;
}
::com::shanghai3h::protobuf::SensorDriverType SensorInfo::drv_type() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.drv_type)
  return static_cast< ::com::shanghai3h::protobuf::SensorDriverType >(drv_type_);
}
void SensorInfo::set_drv_type(::com::shanghai3h::protobuf::SensorDriverType value) {
  
  drv_type_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.drv_type)
}

// string sensorName = 4;
void SensorInfo::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorInfo::sensorname() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.sensorName)
  return sensorname_.GetNoArena();
}
void SensorInfo::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.sensorName)
}
#if LANG_CXX11
void SensorInfo::set_sensorname(::std::string&& value) {
  
  sensorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.SensorInfo.sensorName)
}
#endif
void SensorInfo::set_sensorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.SensorInfo.sensorName)
}
void SensorInfo::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.SensorInfo.sensorName)
}
::std::string* SensorInfo::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SensorInfo.sensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorInfo::release_sensorname() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SensorInfo.sensorName)
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorInfo::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SensorInfo.sensorName)
}

// string partNumber = 5;
void SensorInfo::clear_partnumber() {
  partnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorInfo::partnumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.partNumber)
  return partnumber_.GetNoArena();
}
void SensorInfo::set_partnumber(const ::std::string& value) {
  
  partnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.partNumber)
}
#if LANG_CXX11
void SensorInfo::set_partnumber(::std::string&& value) {
  
  partnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.SensorInfo.partNumber)
}
#endif
void SensorInfo::set_partnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.SensorInfo.partNumber)
}
void SensorInfo::set_partnumber(const char* value, size_t size) {
  
  partnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.SensorInfo.partNumber)
}
::std::string* SensorInfo::mutable_partnumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SensorInfo.partNumber)
  return partnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorInfo::release_partnumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SensorInfo.partNumber)
  
  return partnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorInfo::set_allocated_partnumber(::std::string* partnumber) {
  if (partnumber != NULL) {
    
  } else {
    
  }
  partnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partnumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SensorInfo.partNumber)
}

// uint32 interval = 7;
void SensorInfo::clear_interval() {
  interval_ = 0u;
}
::google::protobuf::uint32 SensorInfo::interval() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.interval)
  return interval_;
}
void SensorInfo::set_interval(::google::protobuf::uint32 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.interval)
}

// uint32 rawCount = 8;
void SensorInfo::clear_rawcount() {
  rawcount_ = 0u;
}
::google::protobuf::uint32 SensorInfo::rawcount() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.rawCount)
  return rawcount_;
}
void SensorInfo::set_rawcount(::google::protobuf::uint32 value) {
  
  rawcount_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorInfo.rawCount)
}

// .com.shanghai3h.protobuf.PressureSensorOption press_opt = 6;
bool SensorInfo::has_press_opt() const {
  return option_case() == kPressOpt;
}
void SensorInfo::set_has_press_opt() {
  _oneof_case_[0] = kPressOpt;
}
void SensorInfo::clear_press_opt() {
  if (has_press_opt()) {
    delete option_.press_opt_;
    clear_has_option();
  }
}
 const ::com::shanghai3h::protobuf::PressureSensorOption& SensorInfo::press_opt() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfo.press_opt)
  return has_press_opt()
      ? *option_.press_opt_
      : ::com::shanghai3h::protobuf::PressureSensorOption::default_instance();
}
::com::shanghai3h::protobuf::PressureSensorOption* SensorInfo::mutable_press_opt() {
  if (!has_press_opt()) {
    clear_option();
    set_has_press_opt();
    option_.press_opt_ = new ::com::shanghai3h::protobuf::PressureSensorOption;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SensorInfo.press_opt)
  return option_.press_opt_;
}
::com::shanghai3h::protobuf::PressureSensorOption* SensorInfo::release_press_opt() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SensorInfo.press_opt)
  if (has_press_opt()) {
    clear_has_option();
    ::com::shanghai3h::protobuf::PressureSensorOption* temp = option_.press_opt_;
    option_.press_opt_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SensorInfo::set_allocated_press_opt(::com::shanghai3h::protobuf::PressureSensorOption* press_opt) {
  clear_option();
  if (press_opt) {
    set_has_press_opt();
    option_.press_opt_ = press_opt;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SensorInfo.press_opt)
}

bool SensorInfo::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
void SensorInfo::clear_has_option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
SensorInfo::OptionCase SensorInfo::option_case() const {
  return SensorInfo::OptionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PressureSensorOption::kCoefficientFieldNumber;
const int PressureSensorOption::kOffsetFieldNumber;
const int PressureSensorOption::kRangeMaxFieldNumber;
const int PressureSensorOption::kRangeMinFieldNumber;
const int PressureSensorOption::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PressureSensorOption::PressureSensorOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Sensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.PressureSensorOption)
}
PressureSensorOption::PressureSensorOption(const PressureSensorOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coefficient_, &from.coefficient_,
    reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&coefficient_) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.PressureSensorOption)
}

void PressureSensorOption::SharedCtor() {
  ::memset(&coefficient_, 0, reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&coefficient_) + sizeof(unit_));
  _cached_size_ = 0;
}

PressureSensorOption::~PressureSensorOption() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.PressureSensorOption)
  SharedDtor();
}

void PressureSensorOption::SharedDtor() {
}

void PressureSensorOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PressureSensorOption::descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PressureSensorOption& PressureSensorOption::default_instance() {
  protobuf_Sensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

PressureSensorOption* PressureSensorOption::New(::google::protobuf::Arena* arena) const {
  PressureSensorOption* n = new PressureSensorOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PressureSensorOption::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.PressureSensorOption)
  ::memset(&coefficient_, 0, reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&coefficient_) + sizeof(unit_));
}

bool PressureSensorOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.PressureSensorOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 coefficient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rangeMax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangemax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rangeMin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangemin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.PressureUnit unit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::com::shanghai3h::protobuf::PressureUnit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.PressureSensorOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.PressureSensorOption)
  return false;
#undef DO_
}

void PressureSensorOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.PressureSensorOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 coefficient = 1;
  if (this->coefficient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coefficient(), output);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // int32 rangeMax = 3;
  if (this->rangemax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rangemax(), output);
  }

  // int32 rangeMin = 4;
  if (this->rangemin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rangemin(), output);
  }

  // .com.shanghai3h.protobuf.PressureUnit unit = 8;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->unit(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.PressureSensorOption)
}

::google::protobuf::uint8* PressureSensorOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.PressureSensorOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 coefficient = 1;
  if (this->coefficient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coefficient(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // int32 rangeMax = 3;
  if (this->rangemax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rangemax(), target);
  }

  // int32 rangeMin = 4;
  if (this->rangemin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rangemin(), target);
  }

  // .com.shanghai3h.protobuf.PressureUnit unit = 8;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->unit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.PressureSensorOption)
  return target;
}

size_t PressureSensorOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.PressureSensorOption)
  size_t total_size = 0;

  // int32 coefficient = 1;
  if (this->coefficient() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coefficient());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  // int32 rangeMax = 3;
  if (this->rangemax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rangemax());
  }

  // int32 rangeMin = 4;
  if (this->rangemin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rangemin());
  }

  // .com.shanghai3h.protobuf.PressureUnit unit = 8;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PressureSensorOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.PressureSensorOption)
  GOOGLE_DCHECK_NE(&from, this);
  const PressureSensorOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PressureSensorOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.PressureSensorOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.PressureSensorOption)
    MergeFrom(*source);
  }
}

void PressureSensorOption::MergeFrom(const PressureSensorOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.PressureSensorOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coefficient() != 0) {
    set_coefficient(from.coefficient());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.rangemax() != 0) {
    set_rangemax(from.rangemax());
  }
  if (from.rangemin() != 0) {
    set_rangemin(from.rangemin());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void PressureSensorOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.PressureSensorOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressureSensorOption::CopyFrom(const PressureSensorOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.PressureSensorOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressureSensorOption::IsInitialized() const {
  return true;
}

void PressureSensorOption::Swap(PressureSensorOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PressureSensorOption::InternalSwap(PressureSensorOption* other) {
  std::swap(coefficient_, other->coefficient_);
  std::swap(offset_, other->offset_);
  std::swap(rangemax_, other->rangemax_);
  std::swap(rangemin_, other->rangemin_);
  std::swap(unit_, other->unit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PressureSensorOption::GetMetadata() const {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PressureSensorOption

// int32 coefficient = 1;
void PressureSensorOption::clear_coefficient() {
  coefficient_ = 0;
}
::google::protobuf::int32 PressureSensorOption::coefficient() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.PressureSensorOption.coefficient)
  return coefficient_;
}
void PressureSensorOption::set_coefficient(::google::protobuf::int32 value) {
  
  coefficient_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.PressureSensorOption.coefficient)
}

// int32 offset = 2;
void PressureSensorOption::clear_offset() {
  offset_ = 0;
}
::google::protobuf::int32 PressureSensorOption::offset() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.PressureSensorOption.offset)
  return offset_;
}
void PressureSensorOption::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.PressureSensorOption.offset)
}

// int32 rangeMax = 3;
void PressureSensorOption::clear_rangemax() {
  rangemax_ = 0;
}
::google::protobuf::int32 PressureSensorOption::rangemax() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.PressureSensorOption.rangeMax)
  return rangemax_;
}
void PressureSensorOption::set_rangemax(::google::protobuf::int32 value) {
  
  rangemax_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.PressureSensorOption.rangeMax)
}

// int32 rangeMin = 4;
void PressureSensorOption::clear_rangemin() {
  rangemin_ = 0;
}
::google::protobuf::int32 PressureSensorOption::rangemin() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.PressureSensorOption.rangeMin)
  return rangemin_;
}
void PressureSensorOption::set_rangemin(::google::protobuf::int32 value) {
  
  rangemin_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.PressureSensorOption.rangeMin)
}

// .com.shanghai3h.protobuf.PressureUnit unit = 8;
void PressureSensorOption::clear_unit() {
  unit_ = 0;
}
::com::shanghai3h::protobuf::PressureUnit PressureSensorOption::unit() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.PressureSensorOption.unit)
  return static_cast< ::com::shanghai3h::protobuf::PressureUnit >(unit_);
}
void PressureSensorOption::set_unit(::com::shanghai3h::protobuf::PressureUnit value) {
  
  unit_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.PressureSensorOption.unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kSizeFieldNumber;
const int SensorData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Sensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.SensorData)
}

void SensorData::SharedCtor() {
  size_ = 0;
  _cached_size_ = 0;
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorData& SensorData::default_instance() {
  protobuf_Sensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorData* SensorData::New(::google::protobuf::Arena* arena) const {
  SensorData* n = new SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.SensorData)
  value_.Clear();
  size_ = 0;
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated int32 value = 2;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated int32 value = 2;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.SensorData)
  size_t total_size = 0;

  // repeated int32 value = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  value_.InternalSwap(&other->value_);
  std::swap(size_, other->size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorData

// int32 size = 1;
void SensorData::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 SensorData::size() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorData.size)
  return size_;
}
void SensorData::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorData.size)
}

// repeated int32 value = 2;
int SensorData::value_size() const {
  return value_.size();
}
void SensorData::clear_value() {
  value_.Clear();
}
::google::protobuf::int32 SensorData::value(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorData.value)
  return value_.Get(index);
}
void SensorData::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SensorData.value)
}
void SensorData::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.SensorData.value)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SensorData::value() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.SensorData.value)
  return value_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SensorData::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.SensorData.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInfoList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInfoList::SensorInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Sensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.SensorInfoList)
}
SensorInfoList::SensorInfoList(const SensorInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      list_(from.list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.SensorInfoList)
}

void SensorInfoList::SharedCtor() {
  _cached_size_ = 0;
}

SensorInfoList::~SensorInfoList() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.SensorInfoList)
  SharedDtor();
}

void SensorInfoList::SharedDtor() {
}

void SensorInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorInfoList::descriptor() {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInfoList& SensorInfoList::default_instance() {
  protobuf_Sensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorInfoList* SensorInfoList::New(::google::protobuf::Arena* arena) const {
  SensorInfoList* n = new SensorInfoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.SensorInfoList)
  list_.Clear();
}

bool SensorInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.SensorInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.shanghai3h.protobuf.SensorInfo list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.SensorInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.SensorInfoList)
  return false;
#undef DO_
}

void SensorInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.SensorInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.shanghai3h.protobuf.SensorInfo list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.SensorInfoList)
}

::google::protobuf::uint8* SensorInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.SensorInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.shanghai3h.protobuf.SensorInfo list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.SensorInfoList)
  return target;
}

size_t SensorInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.SensorInfoList)
  size_t total_size = 0;

  // repeated .com.shanghai3h.protobuf.SensorInfo list = 1;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.SensorInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.SensorInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.SensorInfoList)
    MergeFrom(*source);
  }
}

void SensorInfoList::MergeFrom(const SensorInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.SensorInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SensorInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.SensorInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfoList::CopyFrom(const SensorInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.SensorInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfoList::IsInitialized() const {
  return true;
}

void SensorInfoList::Swap(SensorInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInfoList::InternalSwap(SensorInfoList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorInfoList::GetMetadata() const {
  protobuf_Sensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Sensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorInfoList

// repeated .com.shanghai3h.protobuf.SensorInfo list = 1;
int SensorInfoList::list_size() const {
  return list_.size();
}
void SensorInfoList::clear_list() {
  list_.Clear();
}
const ::com::shanghai3h::protobuf::SensorInfo& SensorInfoList::list(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SensorInfoList.list)
  return list_.Get(index);
}
::com::shanghai3h::protobuf::SensorInfo* SensorInfoList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SensorInfoList.list)
  return list_.Mutable(index);
}
::com::shanghai3h::protobuf::SensorInfo* SensorInfoList::add_list() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.SensorInfoList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >*
SensorInfoList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.SensorInfoList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::SensorInfo >&
SensorInfoList::list() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.SensorInfoList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

// @@protoc_insertion_point(global_scope)
