// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DLF.proto

#ifndef PROTOBUF_DLF_2eproto__INCLUDED
#define PROTOBUF_DLF_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Device.pb.h"
#include "Task.pb.h"
#include "Sensor.pb.h"
#include "History.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace shanghai3h {
namespace protobuf {
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class HistoryCatalogue;
class HistoryCatalogueDefaultTypeInternal;
extern HistoryCatalogueDefaultTypeInternal _HistoryCatalogue_default_instance_;
class HistoryInfo;
class HistoryInfoDefaultTypeInternal;
extern HistoryInfoDefaultTypeInternal _HistoryInfo_default_instance_;
class HistoryRaw;
class HistoryRawDefaultTypeInternal;
extern HistoryRawDefaultTypeInternal _HistoryRaw_default_instance_;
class HistoryRawMenu;
class HistoryRawMenuDefaultTypeInternal;
extern HistoryRawMenuDefaultTypeInternal _HistoryRawMenu_default_instance_;
class PressureSensorOption;
class PressureSensorOptionDefaultTypeInternal;
extern PressureSensorOptionDefaultTypeInternal _PressureSensorOption_default_instance_;
class SH3H_Request;
class SH3H_RequestDefaultTypeInternal;
extern SH3H_RequestDefaultTypeInternal _SH3H_Request_default_instance_;
class SH3H_Response;
class SH3H_ResponseDefaultTypeInternal;
extern SH3H_ResponseDefaultTypeInternal _SH3H_Response_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class SensorInfo;
class SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
class SensorInfoList;
class SensorInfoListDefaultTypeInternal;
extern SensorInfoListDefaultTypeInternal _SensorInfoList_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
class TaskInfoList;
class TaskInfoListDefaultTypeInternal;
extern TaskInfoListDefaultTypeInternal _TaskInfoList_default_instance_;
}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

namespace com {
namespace shanghai3h {
namespace protobuf {

namespace protobuf_DLF_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_DLF_2eproto

enum ErrorType {
  NoError = 0,
  TimeOutError = 1,
  CRCError = 2,
  LengthError = 3,
  DIskFullError = 4,
  StringOverflowError = 5,
  UnkownError = 6,
  ErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorType_IsValid(int value);
const ErrorType ErrorType_MIN = NoError;
const ErrorType ErrorType_MAX = UnkownError;
const int ErrorType_ARRAYSIZE = ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor();
inline const ::std::string& ErrorType_Name(ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorType_descriptor(), value);
}
inline bool ErrorType_Parse(
    const ::std::string& name, ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorType>(
    ErrorType_descriptor(), name, value);
}
enum RequestType {
  Req_HeartBeat = 0,
  Req_DeviceInfo = 1,
  Req_UpdateDeviceInfo = 2,
  Req_SensorList = 14,
  Req_SensorAdd = 4,
  Req_SensorUpdate = 18,
  Req_SensorDataByID = 13,
  Req_SensorDeleteByID = 19,
  Req_TaskList = 3,
  Req_TaskAdd = 6,
  Req_TaskUpdate = 20,
  Req_TaskDelete = 7,
  Req_TaskStop = 8,
  Req_HistoryTotal = 9,
  Req_HistoryIndex = 10,
  Req_HistoryRawData = 11,
  Req_HistoryDelete = 17,
  Req_SyncTime = 12,
  Req_YmodenUpgrade = 15,
  Req_PowerDown = 16,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RequestType_IsValid(int value);
const RequestType RequestType_MIN = Req_HeartBeat;
const RequestType RequestType_MAX = Req_TaskUpdate;
const int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestType_descriptor();
inline const ::std::string& RequestType_Name(RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestType_descriptor(), value);
}
inline bool RequestType_Parse(
    const ::std::string& name, RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum ResponseType {
  Resp_Error = 0,
  Resp_OK = 1,
  Resp_HeartBeat = 9,
  Resp_DeviceInfo = 2,
  Resp_SensorList = 3,
  Resp_SensorVal = 8,
  Resp_TaskList = 4,
  Resp_HistoryTotal = 5,
  Resp_HistoryIndex = 6,
  Resp_HistoryRawData = 7,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = Resp_Error;
const ResponseType ResponseType_MAX = Resp_HeartBeat;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class SH3H_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.SH3H_Request) */ {
 public:
  SH3H_Request();
  virtual ~SH3H_Request();

  SH3H_Request(const SH3H_Request& from);

  inline SH3H_Request& operator=(const SH3H_Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SH3H_Request& default_instance();

  enum ReqCase {
    kSensorID = 2,
    kCurrentTime = 3,
    kTask = 4,
    kDevinfo = 5,
    kSeninfo = 6,
    kCatalog = 7,
    kRawMenu = 8,
    kHisInfo = 9,
    REQ_NOT_SET = 0,
  };

  static inline const SH3H_Request* internal_default_instance() {
    return reinterpret_cast<const SH3H_Request*>(
               &_SH3H_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SH3H_Request* other);

  // implements Message ----------------------------------------------

  inline SH3H_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  SH3H_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SH3H_Request& from);
  void MergeFrom(const SH3H_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SH3H_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.shanghai3h.protobuf.RequestType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::com::shanghai3h::protobuf::RequestType type() const;
  void set_type(::com::shanghai3h::protobuf::RequestType value);

  // uint32 sensorID = 2;
  private:
  bool has_sensorid() const;
  public:
  void clear_sensorid();
  static const int kSensorIDFieldNumber = 2;
  ::google::protobuf::uint32 sensorid() const;
  void set_sensorid(::google::protobuf::uint32 value);

  // uint32 currentTime = 3;
  private:
  bool has_currenttime() const;
  public:
  void clear_currenttime();
  static const int kCurrentTimeFieldNumber = 3;
  ::google::protobuf::uint32 currenttime() const;
  void set_currenttime(::google::protobuf::uint32 value);

  // .com.shanghai3h.protobuf.TaskInfo task = 4;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 4;
  const ::com::shanghai3h::protobuf::TaskInfo& task() const;
  ::com::shanghai3h::protobuf::TaskInfo* mutable_task();
  ::com::shanghai3h::protobuf::TaskInfo* release_task();
  void set_allocated_task(::com::shanghai3h::protobuf::TaskInfo* task);

  // .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
  bool has_devinfo() const;
  void clear_devinfo();
  static const int kDevinfoFieldNumber = 5;
  const ::com::shanghai3h::protobuf::DeviceInfo& devinfo() const;
  ::com::shanghai3h::protobuf::DeviceInfo* mutable_devinfo();
  ::com::shanghai3h::protobuf::DeviceInfo* release_devinfo();
  void set_allocated_devinfo(::com::shanghai3h::protobuf::DeviceInfo* devinfo);

  // .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
  bool has_seninfo() const;
  void clear_seninfo();
  static const int kSeninfoFieldNumber = 6;
  const ::com::shanghai3h::protobuf::SensorInfo& seninfo() const;
  ::com::shanghai3h::protobuf::SensorInfo* mutable_seninfo();
  ::com::shanghai3h::protobuf::SensorInfo* release_seninfo();
  void set_allocated_seninfo(::com::shanghai3h::protobuf::SensorInfo* seninfo);

  // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
  bool has_catalog() const;
  void clear_catalog();
  static const int kCatalogFieldNumber = 7;
  const ::com::shanghai3h::protobuf::HistoryCatalogue& catalog() const;
  ::com::shanghai3h::protobuf::HistoryCatalogue* mutable_catalog();
  ::com::shanghai3h::protobuf::HistoryCatalogue* release_catalog();
  void set_allocated_catalog(::com::shanghai3h::protobuf::HistoryCatalogue* catalog);

  // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
  bool has_rawmenu() const;
  void clear_rawmenu();
  static const int kRawMenuFieldNumber = 8;
  const ::com::shanghai3h::protobuf::HistoryRawMenu& rawmenu() const;
  ::com::shanghai3h::protobuf::HistoryRawMenu* mutable_rawmenu();
  ::com::shanghai3h::protobuf::HistoryRawMenu* release_rawmenu();
  void set_allocated_rawmenu(::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu);

  // .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
  bool has_hisinfo() const;
  void clear_hisinfo();
  static const int kHisInfoFieldNumber = 9;
  const ::com::shanghai3h::protobuf::HistoryInfo& hisinfo() const;
  ::com::shanghai3h::protobuf::HistoryInfo* mutable_hisinfo();
  ::com::shanghai3h::protobuf::HistoryInfo* release_hisinfo();
  void set_allocated_hisinfo(::com::shanghai3h::protobuf::HistoryInfo* hisinfo);

  ReqCase req_case() const;
  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.SH3H_Request)
 private:
  void set_has_sensorid();
  void set_has_currenttime();
  void set_has_task();
  void set_has_devinfo();
  void set_has_seninfo();
  void set_has_catalog();
  void set_has_rawmenu();
  void set_has_hisinfo();

  inline bool has_req() const;
  void clear_req();
  inline void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ReqUnion {
    ReqUnion() {}
    ::google::protobuf::uint32 sensorid_;
    ::google::protobuf::uint32 currenttime_;
    ::com::shanghai3h::protobuf::TaskInfo* task_;
    ::com::shanghai3h::protobuf::DeviceInfo* devinfo_;
    ::com::shanghai3h::protobuf::SensorInfo* seninfo_;
    ::com::shanghai3h::protobuf::HistoryCatalogue* catalog_;
    ::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu_;
    ::com::shanghai3h::protobuf::HistoryInfo* hisinfo_;
  } req_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_DLF_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SH3H_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.SH3H_Response) */ {
 public:
  SH3H_Response();
  virtual ~SH3H_Response();

  SH3H_Response(const SH3H_Response& from);

  inline SH3H_Response& operator=(const SH3H_Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SH3H_Response& default_instance();

  enum RespCase {
    kEcho = 11,
    kBeatcount = 2,
    kDevInfo = 3,
    kSensors = 10,
    kSenData = 9,
    kTasks = 4,
    kError = 5,
    kHistoryTotal = 6,
    kCatalog = 7,
    kRawMenu = 8,
    RESP_NOT_SET = 0,
  };

  static inline const SH3H_Response* internal_default_instance() {
    return reinterpret_cast<const SH3H_Response*>(
               &_SH3H_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SH3H_Response* other);

  // implements Message ----------------------------------------------

  inline SH3H_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  SH3H_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SH3H_Response& from);
  void MergeFrom(const SH3H_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SH3H_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.shanghai3h.protobuf.ResponseType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::com::shanghai3h::protobuf::ResponseType type() const;
  void set_type(::com::shanghai3h::protobuf::ResponseType value);

  // .com.shanghai3h.protobuf.RequestType echo = 11;
  private:
  bool has_echo() const;
  public:
  void clear_echo();
  static const int kEchoFieldNumber = 11;
  ::com::shanghai3h::protobuf::RequestType echo() const;
  void set_echo(::com::shanghai3h::protobuf::RequestType value);

  // uint32 beatcount = 2;
  private:
  bool has_beatcount() const;
  public:
  void clear_beatcount();
  static const int kBeatcountFieldNumber = 2;
  ::google::protobuf::uint32 beatcount() const;
  void set_beatcount(::google::protobuf::uint32 value);

  // .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
  bool has_devinfo() const;
  void clear_devinfo();
  static const int kDevInfoFieldNumber = 3;
  const ::com::shanghai3h::protobuf::DeviceInfo& devinfo() const;
  ::com::shanghai3h::protobuf::DeviceInfo* mutable_devinfo();
  ::com::shanghai3h::protobuf::DeviceInfo* release_devinfo();
  void set_allocated_devinfo(::com::shanghai3h::protobuf::DeviceInfo* devinfo);

  // .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
  bool has_sensors() const;
  void clear_sensors();
  static const int kSensorsFieldNumber = 10;
  const ::com::shanghai3h::protobuf::SensorInfoList& sensors() const;
  ::com::shanghai3h::protobuf::SensorInfoList* mutable_sensors();
  ::com::shanghai3h::protobuf::SensorInfoList* release_sensors();
  void set_allocated_sensors(::com::shanghai3h::protobuf::SensorInfoList* sensors);

  // .com.shanghai3h.protobuf.SensorData senData = 9;
  bool has_sendata() const;
  void clear_sendata();
  static const int kSenDataFieldNumber = 9;
  const ::com::shanghai3h::protobuf::SensorData& sendata() const;
  ::com::shanghai3h::protobuf::SensorData* mutable_sendata();
  ::com::shanghai3h::protobuf::SensorData* release_sendata();
  void set_allocated_sendata(::com::shanghai3h::protobuf::SensorData* sendata);

  // .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
  bool has_tasks() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 4;
  const ::com::shanghai3h::protobuf::TaskInfoList& tasks() const;
  ::com::shanghai3h::protobuf::TaskInfoList* mutable_tasks();
  ::com::shanghai3h::protobuf::TaskInfoList* release_tasks();
  void set_allocated_tasks(::com::shanghai3h::protobuf::TaskInfoList* tasks);

  // .com.shanghai3h.protobuf.ErrorType error = 5;
  private:
  bool has_error() const;
  public:
  void clear_error();
  static const int kErrorFieldNumber = 5;
  ::com::shanghai3h::protobuf::ErrorType error() const;
  void set_error(::com::shanghai3h::protobuf::ErrorType value);

  // uint32 historyTotal = 6;
  private:
  bool has_historytotal() const;
  public:
  void clear_historytotal();
  static const int kHistoryTotalFieldNumber = 6;
  ::google::protobuf::uint32 historytotal() const;
  void set_historytotal(::google::protobuf::uint32 value);

  // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
  bool has_catalog() const;
  void clear_catalog();
  static const int kCatalogFieldNumber = 7;
  const ::com::shanghai3h::protobuf::HistoryCatalogue& catalog() const;
  ::com::shanghai3h::protobuf::HistoryCatalogue* mutable_catalog();
  ::com::shanghai3h::protobuf::HistoryCatalogue* release_catalog();
  void set_allocated_catalog(::com::shanghai3h::protobuf::HistoryCatalogue* catalog);

  // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
  bool has_rawmenu() const;
  void clear_rawmenu();
  static const int kRawMenuFieldNumber = 8;
  const ::com::shanghai3h::protobuf::HistoryRawMenu& rawmenu() const;
  ::com::shanghai3h::protobuf::HistoryRawMenu* mutable_rawmenu();
  ::com::shanghai3h::protobuf::HistoryRawMenu* release_rawmenu();
  void set_allocated_rawmenu(::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu);

  RespCase resp_case() const;
  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.SH3H_Response)
 private:
  void set_has_echo();
  void set_has_beatcount();
  void set_has_devinfo();
  void set_has_sensors();
  void set_has_sendata();
  void set_has_tasks();
  void set_has_error();
  void set_has_historytotal();
  void set_has_catalog();
  void set_has_rawmenu();

  inline bool has_resp() const;
  void clear_resp();
  inline void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union RespUnion {
    RespUnion() {}
    int echo_;
    ::google::protobuf::uint32 beatcount_;
    ::com::shanghai3h::protobuf::DeviceInfo* devinfo_;
    ::com::shanghai3h::protobuf::SensorInfoList* sensors_;
    ::com::shanghai3h::protobuf::SensorData* sendata_;
    ::com::shanghai3h::protobuf::TaskInfoList* tasks_;
    int error_;
    ::google::protobuf::uint32 historytotal_;
    ::com::shanghai3h::protobuf::HistoryCatalogue* catalog_;
    ::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu_;
  } resp_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_DLF_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SH3H_Request

// .com.shanghai3h.protobuf.RequestType type = 1;
inline void SH3H_Request::clear_type() {
  type_ = 0;
}
inline ::com::shanghai3h::protobuf::RequestType SH3H_Request::type() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.type)
  return static_cast< ::com::shanghai3h::protobuf::RequestType >(type_);
}
inline void SH3H_Request::set_type(::com::shanghai3h::protobuf::RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Request.type)
}

// uint32 sensorID = 2;
inline bool SH3H_Request::has_sensorid() const {
  return req_case() == kSensorID;
}
inline void SH3H_Request::set_has_sensorid() {
  _oneof_case_[0] = kSensorID;
}
inline void SH3H_Request::clear_sensorid() {
  if (has_sensorid()) {
    req_.sensorid_ = 0u;
    clear_has_req();
  }
}
inline ::google::protobuf::uint32 SH3H_Request::sensorid() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.sensorID)
  if (has_sensorid()) {
    return req_.sensorid_;
  }
  return 0u;
}
inline void SH3H_Request::set_sensorid(::google::protobuf::uint32 value) {
  if (!has_sensorid()) {
    clear_req();
    set_has_sensorid();
  }
  req_.sensorid_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Request.sensorID)
}

// uint32 currentTime = 3;
inline bool SH3H_Request::has_currenttime() const {
  return req_case() == kCurrentTime;
}
inline void SH3H_Request::set_has_currenttime() {
  _oneof_case_[0] = kCurrentTime;
}
inline void SH3H_Request::clear_currenttime() {
  if (has_currenttime()) {
    req_.currenttime_ = 0u;
    clear_has_req();
  }
}
inline ::google::protobuf::uint32 SH3H_Request::currenttime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.currentTime)
  if (has_currenttime()) {
    return req_.currenttime_;
  }
  return 0u;
}
inline void SH3H_Request::set_currenttime(::google::protobuf::uint32 value) {
  if (!has_currenttime()) {
    clear_req();
    set_has_currenttime();
  }
  req_.currenttime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Request.currentTime)
}

// .com.shanghai3h.protobuf.TaskInfo task = 4;
inline bool SH3H_Request::has_task() const {
  return req_case() == kTask;
}
inline void SH3H_Request::set_has_task() {
  _oneof_case_[0] = kTask;
}
inline void SH3H_Request::clear_task() {
  if (has_task()) {
    delete req_.task_;
    clear_has_req();
  }
}
inline  const ::com::shanghai3h::protobuf::TaskInfo& SH3H_Request::task() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.task)
  return has_task()
      ? *req_.task_
      : ::com::shanghai3h::protobuf::TaskInfo::default_instance();
}
inline ::com::shanghai3h::protobuf::TaskInfo* SH3H_Request::mutable_task() {
  if (!has_task()) {
    clear_req();
    set_has_task();
    req_.task_ = new ::com::shanghai3h::protobuf::TaskInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.task)
  return req_.task_;
}
inline ::com::shanghai3h::protobuf::TaskInfo* SH3H_Request::release_task() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.task)
  if (has_task()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::TaskInfo* temp = req_.task_;
    req_.task_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Request::set_allocated_task(::com::shanghai3h::protobuf::TaskInfo* task) {
  clear_req();
  if (task) {
    set_has_task();
    req_.task_ = task;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.task)
}

// .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
inline bool SH3H_Request::has_devinfo() const {
  return req_case() == kDevinfo;
}
inline void SH3H_Request::set_has_devinfo() {
  _oneof_case_[0] = kDevinfo;
}
inline void SH3H_Request::clear_devinfo() {
  if (has_devinfo()) {
    delete req_.devinfo_;
    clear_has_req();
  }
}
inline  const ::com::shanghai3h::protobuf::DeviceInfo& SH3H_Request::devinfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.devinfo)
  return has_devinfo()
      ? *req_.devinfo_
      : ::com::shanghai3h::protobuf::DeviceInfo::default_instance();
}
inline ::com::shanghai3h::protobuf::DeviceInfo* SH3H_Request::mutable_devinfo() {
  if (!has_devinfo()) {
    clear_req();
    set_has_devinfo();
    req_.devinfo_ = new ::com::shanghai3h::protobuf::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.devinfo)
  return req_.devinfo_;
}
inline ::com::shanghai3h::protobuf::DeviceInfo* SH3H_Request::release_devinfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.devinfo)
  if (has_devinfo()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::DeviceInfo* temp = req_.devinfo_;
    req_.devinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Request::set_allocated_devinfo(::com::shanghai3h::protobuf::DeviceInfo* devinfo) {
  clear_req();
  if (devinfo) {
    set_has_devinfo();
    req_.devinfo_ = devinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.devinfo)
}

// .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
inline bool SH3H_Request::has_seninfo() const {
  return req_case() == kSeninfo;
}
inline void SH3H_Request::set_has_seninfo() {
  _oneof_case_[0] = kSeninfo;
}
inline void SH3H_Request::clear_seninfo() {
  if (has_seninfo()) {
    delete req_.seninfo_;
    clear_has_req();
  }
}
inline  const ::com::shanghai3h::protobuf::SensorInfo& SH3H_Request::seninfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.seninfo)
  return has_seninfo()
      ? *req_.seninfo_
      : ::com::shanghai3h::protobuf::SensorInfo::default_instance();
}
inline ::com::shanghai3h::protobuf::SensorInfo* SH3H_Request::mutable_seninfo() {
  if (!has_seninfo()) {
    clear_req();
    set_has_seninfo();
    req_.seninfo_ = new ::com::shanghai3h::protobuf::SensorInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.seninfo)
  return req_.seninfo_;
}
inline ::com::shanghai3h::protobuf::SensorInfo* SH3H_Request::release_seninfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.seninfo)
  if (has_seninfo()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::SensorInfo* temp = req_.seninfo_;
    req_.seninfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Request::set_allocated_seninfo(::com::shanghai3h::protobuf::SensorInfo* seninfo) {
  clear_req();
  if (seninfo) {
    set_has_seninfo();
    req_.seninfo_ = seninfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.seninfo)
}

// .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
inline bool SH3H_Request::has_catalog() const {
  return req_case() == kCatalog;
}
inline void SH3H_Request::set_has_catalog() {
  _oneof_case_[0] = kCatalog;
}
inline void SH3H_Request::clear_catalog() {
  if (has_catalog()) {
    delete req_.catalog_;
    clear_has_req();
  }
}
inline  const ::com::shanghai3h::protobuf::HistoryCatalogue& SH3H_Request::catalog() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.catalog)
  return has_catalog()
      ? *req_.catalog_
      : ::com::shanghai3h::protobuf::HistoryCatalogue::default_instance();
}
inline ::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Request::mutable_catalog() {
  if (!has_catalog()) {
    clear_req();
    set_has_catalog();
    req_.catalog_ = new ::com::shanghai3h::protobuf::HistoryCatalogue;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.catalog)
  return req_.catalog_;
}
inline ::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Request::release_catalog() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.catalog)
  if (has_catalog()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::HistoryCatalogue* temp = req_.catalog_;
    req_.catalog_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Request::set_allocated_catalog(::com::shanghai3h::protobuf::HistoryCatalogue* catalog) {
  clear_req();
  if (catalog) {
    set_has_catalog();
    req_.catalog_ = catalog;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.catalog)
}

// .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
inline bool SH3H_Request::has_rawmenu() const {
  return req_case() == kRawMenu;
}
inline void SH3H_Request::set_has_rawmenu() {
  _oneof_case_[0] = kRawMenu;
}
inline void SH3H_Request::clear_rawmenu() {
  if (has_rawmenu()) {
    delete req_.rawmenu_;
    clear_has_req();
  }
}
inline  const ::com::shanghai3h::protobuf::HistoryRawMenu& SH3H_Request::rawmenu() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
  return has_rawmenu()
      ? *req_.rawmenu_
      : ::com::shanghai3h::protobuf::HistoryRawMenu::default_instance();
}
inline ::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Request::mutable_rawmenu() {
  if (!has_rawmenu()) {
    clear_req();
    set_has_rawmenu();
    req_.rawmenu_ = new ::com::shanghai3h::protobuf::HistoryRawMenu;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
  return req_.rawmenu_;
}
inline ::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Request::release_rawmenu() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
  if (has_rawmenu()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::HistoryRawMenu* temp = req_.rawmenu_;
    req_.rawmenu_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Request::set_allocated_rawmenu(::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu) {
  clear_req();
  if (rawmenu) {
    set_has_rawmenu();
    req_.rawmenu_ = rawmenu;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
}

// .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
inline bool SH3H_Request::has_hisinfo() const {
  return req_case() == kHisInfo;
}
inline void SH3H_Request::set_has_hisinfo() {
  _oneof_case_[0] = kHisInfo;
}
inline void SH3H_Request::clear_hisinfo() {
  if (has_hisinfo()) {
    delete req_.hisinfo_;
    clear_has_req();
  }
}
inline  const ::com::shanghai3h::protobuf::HistoryInfo& SH3H_Request::hisinfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
  return has_hisinfo()
      ? *req_.hisinfo_
      : ::com::shanghai3h::protobuf::HistoryInfo::default_instance();
}
inline ::com::shanghai3h::protobuf::HistoryInfo* SH3H_Request::mutable_hisinfo() {
  if (!has_hisinfo()) {
    clear_req();
    set_has_hisinfo();
    req_.hisinfo_ = new ::com::shanghai3h::protobuf::HistoryInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
  return req_.hisinfo_;
}
inline ::com::shanghai3h::protobuf::HistoryInfo* SH3H_Request::release_hisinfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
  if (has_hisinfo()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::HistoryInfo* temp = req_.hisinfo_;
    req_.hisinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Request::set_allocated_hisinfo(::com::shanghai3h::protobuf::HistoryInfo* hisinfo) {
  clear_req();
  if (hisinfo) {
    set_has_hisinfo();
    req_.hisinfo_ = hisinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
}

inline bool SH3H_Request::has_req() const {
  return req_case() != REQ_NOT_SET;
}
inline void SH3H_Request::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
inline SH3H_Request::ReqCase SH3H_Request::req_case() const {
  return SH3H_Request::ReqCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SH3H_Response

// .com.shanghai3h.protobuf.ResponseType type = 1;
inline void SH3H_Response::clear_type() {
  type_ = 0;
}
inline ::com::shanghai3h::protobuf::ResponseType SH3H_Response::type() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.type)
  return static_cast< ::com::shanghai3h::protobuf::ResponseType >(type_);
}
inline void SH3H_Response::set_type(::com::shanghai3h::protobuf::ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.type)
}

// .com.shanghai3h.protobuf.RequestType echo = 11;
inline bool SH3H_Response::has_echo() const {
  return resp_case() == kEcho;
}
inline void SH3H_Response::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
inline void SH3H_Response::clear_echo() {
  if (has_echo()) {
    resp_.echo_ = 0;
    clear_has_resp();
  }
}
inline ::com::shanghai3h::protobuf::RequestType SH3H_Response::echo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.echo)
  if (has_echo()) {
    return static_cast< ::com::shanghai3h::protobuf::RequestType >(resp_.echo_);
  }
  return static_cast< ::com::shanghai3h::protobuf::RequestType >(0);
}
inline void SH3H_Response::set_echo(::com::shanghai3h::protobuf::RequestType value) {
  if (!has_echo()) {
    clear_resp();
    set_has_echo();
  }
  resp_.echo_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.echo)
}

// uint32 beatcount = 2;
inline bool SH3H_Response::has_beatcount() const {
  return resp_case() == kBeatcount;
}
inline void SH3H_Response::set_has_beatcount() {
  _oneof_case_[0] = kBeatcount;
}
inline void SH3H_Response::clear_beatcount() {
  if (has_beatcount()) {
    resp_.beatcount_ = 0u;
    clear_has_resp();
  }
}
inline ::google::protobuf::uint32 SH3H_Response::beatcount() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.beatcount)
  if (has_beatcount()) {
    return resp_.beatcount_;
  }
  return 0u;
}
inline void SH3H_Response::set_beatcount(::google::protobuf::uint32 value) {
  if (!has_beatcount()) {
    clear_resp();
    set_has_beatcount();
  }
  resp_.beatcount_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.beatcount)
}

// .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
inline bool SH3H_Response::has_devinfo() const {
  return resp_case() == kDevInfo;
}
inline void SH3H_Response::set_has_devinfo() {
  _oneof_case_[0] = kDevInfo;
}
inline void SH3H_Response::clear_devinfo() {
  if (has_devinfo()) {
    delete resp_.devinfo_;
    clear_has_resp();
  }
}
inline  const ::com::shanghai3h::protobuf::DeviceInfo& SH3H_Response::devinfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.devInfo)
  return has_devinfo()
      ? *resp_.devinfo_
      : ::com::shanghai3h::protobuf::DeviceInfo::default_instance();
}
inline ::com::shanghai3h::protobuf::DeviceInfo* SH3H_Response::mutable_devinfo() {
  if (!has_devinfo()) {
    clear_resp();
    set_has_devinfo();
    resp_.devinfo_ = new ::com::shanghai3h::protobuf::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.devInfo)
  return resp_.devinfo_;
}
inline ::com::shanghai3h::protobuf::DeviceInfo* SH3H_Response::release_devinfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.devInfo)
  if (has_devinfo()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::DeviceInfo* temp = resp_.devinfo_;
    resp_.devinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Response::set_allocated_devinfo(::com::shanghai3h::protobuf::DeviceInfo* devinfo) {
  clear_resp();
  if (devinfo) {
    set_has_devinfo();
    resp_.devinfo_ = devinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.devInfo)
}

// .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
inline bool SH3H_Response::has_sensors() const {
  return resp_case() == kSensors;
}
inline void SH3H_Response::set_has_sensors() {
  _oneof_case_[0] = kSensors;
}
inline void SH3H_Response::clear_sensors() {
  if (has_sensors()) {
    delete resp_.sensors_;
    clear_has_resp();
  }
}
inline  const ::com::shanghai3h::protobuf::SensorInfoList& SH3H_Response::sensors() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.sensors)
  return has_sensors()
      ? *resp_.sensors_
      : ::com::shanghai3h::protobuf::SensorInfoList::default_instance();
}
inline ::com::shanghai3h::protobuf::SensorInfoList* SH3H_Response::mutable_sensors() {
  if (!has_sensors()) {
    clear_resp();
    set_has_sensors();
    resp_.sensors_ = new ::com::shanghai3h::protobuf::SensorInfoList;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.sensors)
  return resp_.sensors_;
}
inline ::com::shanghai3h::protobuf::SensorInfoList* SH3H_Response::release_sensors() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.sensors)
  if (has_sensors()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::SensorInfoList* temp = resp_.sensors_;
    resp_.sensors_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Response::set_allocated_sensors(::com::shanghai3h::protobuf::SensorInfoList* sensors) {
  clear_resp();
  if (sensors) {
    set_has_sensors();
    resp_.sensors_ = sensors;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.sensors)
}

// .com.shanghai3h.protobuf.SensorData senData = 9;
inline bool SH3H_Response::has_sendata() const {
  return resp_case() == kSenData;
}
inline void SH3H_Response::set_has_sendata() {
  _oneof_case_[0] = kSenData;
}
inline void SH3H_Response::clear_sendata() {
  if (has_sendata()) {
    delete resp_.sendata_;
    clear_has_resp();
  }
}
inline  const ::com::shanghai3h::protobuf::SensorData& SH3H_Response::sendata() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.senData)
  return has_sendata()
      ? *resp_.sendata_
      : ::com::shanghai3h::protobuf::SensorData::default_instance();
}
inline ::com::shanghai3h::protobuf::SensorData* SH3H_Response::mutable_sendata() {
  if (!has_sendata()) {
    clear_resp();
    set_has_sendata();
    resp_.sendata_ = new ::com::shanghai3h::protobuf::SensorData;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.senData)
  return resp_.sendata_;
}
inline ::com::shanghai3h::protobuf::SensorData* SH3H_Response::release_sendata() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.senData)
  if (has_sendata()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::SensorData* temp = resp_.sendata_;
    resp_.sendata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Response::set_allocated_sendata(::com::shanghai3h::protobuf::SensorData* sendata) {
  clear_resp();
  if (sendata) {
    set_has_sendata();
    resp_.sendata_ = sendata;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.senData)
}

// .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
inline bool SH3H_Response::has_tasks() const {
  return resp_case() == kTasks;
}
inline void SH3H_Response::set_has_tasks() {
  _oneof_case_[0] = kTasks;
}
inline void SH3H_Response::clear_tasks() {
  if (has_tasks()) {
    delete resp_.tasks_;
    clear_has_resp();
  }
}
inline  const ::com::shanghai3h::protobuf::TaskInfoList& SH3H_Response::tasks() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.tasks)
  return has_tasks()
      ? *resp_.tasks_
      : ::com::shanghai3h::protobuf::TaskInfoList::default_instance();
}
inline ::com::shanghai3h::protobuf::TaskInfoList* SH3H_Response::mutable_tasks() {
  if (!has_tasks()) {
    clear_resp();
    set_has_tasks();
    resp_.tasks_ = new ::com::shanghai3h::protobuf::TaskInfoList;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.tasks)
  return resp_.tasks_;
}
inline ::com::shanghai3h::protobuf::TaskInfoList* SH3H_Response::release_tasks() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.tasks)
  if (has_tasks()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::TaskInfoList* temp = resp_.tasks_;
    resp_.tasks_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Response::set_allocated_tasks(::com::shanghai3h::protobuf::TaskInfoList* tasks) {
  clear_resp();
  if (tasks) {
    set_has_tasks();
    resp_.tasks_ = tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.tasks)
}

// .com.shanghai3h.protobuf.ErrorType error = 5;
inline bool SH3H_Response::has_error() const {
  return resp_case() == kError;
}
inline void SH3H_Response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void SH3H_Response::clear_error() {
  if (has_error()) {
    resp_.error_ = 0;
    clear_has_resp();
  }
}
inline ::com::shanghai3h::protobuf::ErrorType SH3H_Response::error() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.error)
  if (has_error()) {
    return static_cast< ::com::shanghai3h::protobuf::ErrorType >(resp_.error_);
  }
  return static_cast< ::com::shanghai3h::protobuf::ErrorType >(0);
}
inline void SH3H_Response::set_error(::com::shanghai3h::protobuf::ErrorType value) {
  if (!has_error()) {
    clear_resp();
    set_has_error();
  }
  resp_.error_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.error)
}

// uint32 historyTotal = 6;
inline bool SH3H_Response::has_historytotal() const {
  return resp_case() == kHistoryTotal;
}
inline void SH3H_Response::set_has_historytotal() {
  _oneof_case_[0] = kHistoryTotal;
}
inline void SH3H_Response::clear_historytotal() {
  if (has_historytotal()) {
    resp_.historytotal_ = 0u;
    clear_has_resp();
  }
}
inline ::google::protobuf::uint32 SH3H_Response::historytotal() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.historyTotal)
  if (has_historytotal()) {
    return resp_.historytotal_;
  }
  return 0u;
}
inline void SH3H_Response::set_historytotal(::google::protobuf::uint32 value) {
  if (!has_historytotal()) {
    clear_resp();
    set_has_historytotal();
  }
  resp_.historytotal_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.historyTotal)
}

// .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
inline bool SH3H_Response::has_catalog() const {
  return resp_case() == kCatalog;
}
inline void SH3H_Response::set_has_catalog() {
  _oneof_case_[0] = kCatalog;
}
inline void SH3H_Response::clear_catalog() {
  if (has_catalog()) {
    delete resp_.catalog_;
    clear_has_resp();
  }
}
inline  const ::com::shanghai3h::protobuf::HistoryCatalogue& SH3H_Response::catalog() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.catalog)
  return has_catalog()
      ? *resp_.catalog_
      : ::com::shanghai3h::protobuf::HistoryCatalogue::default_instance();
}
inline ::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Response::mutable_catalog() {
  if (!has_catalog()) {
    clear_resp();
    set_has_catalog();
    resp_.catalog_ = new ::com::shanghai3h::protobuf::HistoryCatalogue;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.catalog)
  return resp_.catalog_;
}
inline ::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Response::release_catalog() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.catalog)
  if (has_catalog()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::HistoryCatalogue* temp = resp_.catalog_;
    resp_.catalog_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Response::set_allocated_catalog(::com::shanghai3h::protobuf::HistoryCatalogue* catalog) {
  clear_resp();
  if (catalog) {
    set_has_catalog();
    resp_.catalog_ = catalog;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.catalog)
}

// .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
inline bool SH3H_Response::has_rawmenu() const {
  return resp_case() == kRawMenu;
}
inline void SH3H_Response::set_has_rawmenu() {
  _oneof_case_[0] = kRawMenu;
}
inline void SH3H_Response::clear_rawmenu() {
  if (has_rawmenu()) {
    delete resp_.rawmenu_;
    clear_has_resp();
  }
}
inline  const ::com::shanghai3h::protobuf::HistoryRawMenu& SH3H_Response::rawmenu() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
  return has_rawmenu()
      ? *resp_.rawmenu_
      : ::com::shanghai3h::protobuf::HistoryRawMenu::default_instance();
}
inline ::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Response::mutable_rawmenu() {
  if (!has_rawmenu()) {
    clear_resp();
    set_has_rawmenu();
    resp_.rawmenu_ = new ::com::shanghai3h::protobuf::HistoryRawMenu;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
  return resp_.rawmenu_;
}
inline ::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Response::release_rawmenu() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
  if (has_rawmenu()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::HistoryRawMenu* temp = resp_.rawmenu_;
    resp_.rawmenu_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SH3H_Response::set_allocated_rawmenu(::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu) {
  clear_resp();
  if (rawmenu) {
    set_has_rawmenu();
    resp_.rawmenu_ = rawmenu;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
}

inline bool SH3H_Response::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
inline void SH3H_Response::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
inline SH3H_Response::RespCase SH3H_Response::resp_case() const {
  return SH3H_Response::RespCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::shanghai3h::protobuf::ErrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::shanghai3h::protobuf::ErrorType>() {
  return ::com::shanghai3h::protobuf::ErrorType_descriptor();
}
template <> struct is_proto_enum< ::com::shanghai3h::protobuf::RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::shanghai3h::protobuf::RequestType>() {
  return ::com::shanghai3h::protobuf::RequestType_descriptor();
}
template <> struct is_proto_enum< ::com::shanghai3h::protobuf::ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::shanghai3h::protobuf::ResponseType>() {
  return ::com::shanghai3h::protobuf::ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DLF_2eproto__INCLUDED
