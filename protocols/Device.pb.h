// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Device.proto

#ifndef PROTOBUF_Device_2eproto__INCLUDED
#define PROTOBUF_Device_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace shanghai3h {
namespace protobuf {
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

namespace com {
namespace shanghai3h {
namespace protobuf {

namespace protobuf_Device_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Device_2eproto

enum Language {
  Chinese = 0,
  English = 1,
  Language_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Language_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Language_IsValid(int value);
const Language Language_MIN = Chinese;
const Language Language_MAX = English;
const int Language_ARRAYSIZE = Language_MAX + 1;

const ::google::protobuf::EnumDescriptor* Language_descriptor();
inline const ::std::string& Language_Name(Language value) {
  return ::google::protobuf::internal::NameOfEnum(
    Language_descriptor(), value);
}
inline bool Language_Parse(
    const ::std::string& name, Language* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Language>(
    Language_descriptor(), name, value);
}
// ===================================================================

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DeviceInfo* other);

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceNumber = 1;
  void clear_devicenumber();
  static const int kDeviceNumberFieldNumber = 1;
  const ::std::string& devicenumber() const;
  void set_devicenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_devicenumber(::std::string&& value);
  #endif
  void set_devicenumber(const char* value);
  void set_devicenumber(const char* value, size_t size);
  ::std::string* mutable_devicenumber();
  ::std::string* release_devicenumber();
  void set_allocated_devicenumber(::std::string* devicenumber);

  // string majorVersion = 2;
  void clear_majorversion();
  static const int kMajorVersionFieldNumber = 2;
  const ::std::string& majorversion() const;
  void set_majorversion(const ::std::string& value);
  #if LANG_CXX11
  void set_majorversion(::std::string&& value);
  #endif
  void set_majorversion(const char* value);
  void set_majorversion(const char* value, size_t size);
  ::std::string* mutable_majorversion();
  ::std::string* release_majorversion();
  void set_allocated_majorversion(::std::string* majorversion);

  // string minorVersion = 3;
  void clear_minorversion();
  static const int kMinorVersionFieldNumber = 3;
  const ::std::string& minorversion() const;
  void set_minorversion(const ::std::string& value);
  #if LANG_CXX11
  void set_minorversion(::std::string&& value);
  #endif
  void set_minorversion(const char* value);
  void set_minorversion(const char* value, size_t size);
  ::std::string* mutable_minorversion();
  ::std::string* release_minorversion();
  void set_allocated_minorversion(::std::string* minorversion);

  // string serialNumber = 4;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 4;
  const ::std::string& serialnumber() const;
  void set_serialnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_serialnumber(::std::string&& value);
  #endif
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  ::std::string* mutable_serialnumber();
  ::std::string* release_serialnumber();
  void set_allocated_serialnumber(::std::string* serialnumber);

  // string bt_BCName = 5;
  void clear_bt_bcname();
  static const int kBtBCNameFieldNumber = 5;
  const ::std::string& bt_bcname() const;
  void set_bt_bcname(const ::std::string& value);
  #if LANG_CXX11
  void set_bt_bcname(::std::string&& value);
  #endif
  void set_bt_bcname(const char* value);
  void set_bt_bcname(const char* value, size_t size);
  ::std::string* mutable_bt_bcname();
  ::std::string* release_bt_bcname();
  void set_allocated_bt_bcname(::std::string* bt_bcname);

  // uint32 sleepTime = 6;
  void clear_sleeptime();
  static const int kSleepTimeFieldNumber = 6;
  ::google::protobuf::uint32 sleeptime() const;
  void set_sleeptime(::google::protobuf::uint32 value);

  // int32 timeZone = 7;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 7;
  ::google::protobuf::int32 timezone() const;
  void set_timezone(::google::protobuf::int32 value);

  // .com.shanghai3h.protobuf.Language lang = 8;
  void clear_lang();
  static const int kLangFieldNumber = 8;
  ::com::shanghai3h::protobuf::Language lang() const;
  void set_lang(::com::shanghai3h::protobuf::Language value);

  // uint32 diskMaxSize = 9;
  void clear_diskmaxsize();
  static const int kDiskMaxSizeFieldNumber = 9;
  ::google::protobuf::uint32 diskmaxsize() const;
  void set_diskmaxsize(::google::protobuf::uint32 value);

  // double longitude = 11;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 11;
  double longitude() const;
  void set_longitude(double value);

  // uint32 diskFreeSpace = 10;
  void clear_diskfreespace();
  static const int kDiskFreeSpaceFieldNumber = 10;
  ::google::protobuf::uint32 diskfreespace() const;
  void set_diskfreespace(::google::protobuf::uint32 value);

  // bool cacheMode = 13;
  void clear_cachemode();
  static const int kCacheModeFieldNumber = 13;
  bool cachemode() const;
  void set_cachemode(bool value);

  // double latitude = 12;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 12;
  double latitude() const;
  void set_latitude(double value);

  // uint32 bat_total = 16;
  void clear_bat_total();
  static const int kBatTotalFieldNumber = 16;
  ::google::protobuf::uint32 bat_total() const;
  void set_bat_total(::google::protobuf::uint32 value);

  // uint32 bat_remain = 17;
  void clear_bat_remain();
  static const int kBatRemainFieldNumber = 17;
  ::google::protobuf::uint32 bat_remain() const;
  void set_bat_remain(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicenumber_;
  ::google::protobuf::internal::ArenaStringPtr majorversion_;
  ::google::protobuf::internal::ArenaStringPtr minorversion_;
  ::google::protobuf::internal::ArenaStringPtr serialnumber_;
  ::google::protobuf::internal::ArenaStringPtr bt_bcname_;
  ::google::protobuf::uint32 sleeptime_;
  ::google::protobuf::int32 timezone_;
  int lang_;
  ::google::protobuf::uint32 diskmaxsize_;
  double longitude_;
  ::google::protobuf::uint32 diskfreespace_;
  bool cachemode_;
  double latitude_;
  ::google::protobuf::uint32 bat_total_;
  ::google::protobuf::uint32 bat_remain_;
  mutable int _cached_size_;
  friend struct protobuf_Device_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfo

// string deviceNumber = 1;
inline void DeviceInfo::clear_devicenumber() {
  devicenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::devicenumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
  return devicenumber_.GetNoArena();
}
inline void DeviceInfo::set_devicenumber(const ::std::string& value) {
  
  devicenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
#if LANG_CXX11
inline void DeviceInfo::set_devicenumber(::std::string&& value) {
  
  devicenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
#endif
inline void DeviceInfo::set_devicenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
inline void DeviceInfo::set_devicenumber(const char* value, size_t size) {
  
  devicenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}
inline ::std::string* DeviceInfo::mutable_devicenumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
  return devicenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_devicenumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
  
  return devicenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_devicenumber(::std::string* devicenumber) {
  if (devicenumber != NULL) {
    
  } else {
    
  }
  devicenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicenumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.deviceNumber)
}

// string majorVersion = 2;
inline void DeviceInfo::clear_majorversion() {
  majorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::majorversion() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
  return majorversion_.GetNoArena();
}
inline void DeviceInfo::set_majorversion(const ::std::string& value) {
  
  majorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
#if LANG_CXX11
inline void DeviceInfo::set_majorversion(::std::string&& value) {
  
  majorversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
#endif
inline void DeviceInfo::set_majorversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  majorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
inline void DeviceInfo::set_majorversion(const char* value, size_t size) {
  
  majorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}
inline ::std::string* DeviceInfo::mutable_majorversion() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
  return majorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_majorversion() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
  
  return majorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_majorversion(::std::string* majorversion) {
  if (majorversion != NULL) {
    
  } else {
    
  }
  majorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), majorversion);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.majorVersion)
}

// string minorVersion = 3;
inline void DeviceInfo::clear_minorversion() {
  minorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::minorversion() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
  return minorversion_.GetNoArena();
}
inline void DeviceInfo::set_minorversion(const ::std::string& value) {
  
  minorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
#if LANG_CXX11
inline void DeviceInfo::set_minorversion(::std::string&& value) {
  
  minorversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
#endif
inline void DeviceInfo::set_minorversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  minorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
inline void DeviceInfo::set_minorversion(const char* value, size_t size) {
  
  minorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}
inline ::std::string* DeviceInfo::mutable_minorversion() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
  return minorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_minorversion() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
  
  return minorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_minorversion(::std::string* minorversion) {
  if (minorversion != NULL) {
    
  } else {
    
  }
  minorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), minorversion);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.minorVersion)
}

// string serialNumber = 4;
inline void DeviceInfo::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::serialnumber() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
  return serialnumber_.GetNoArena();
}
inline void DeviceInfo::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
#if LANG_CXX11
inline void DeviceInfo::set_serialnumber(::std::string&& value) {
  
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
#endif
inline void DeviceInfo::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
inline void DeviceInfo::set_serialnumber(const char* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}
inline ::std::string* DeviceInfo::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_serialnumber() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.serialNumber)
}

// string bt_BCName = 5;
inline void DeviceInfo::clear_bt_bcname() {
  bt_bcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::bt_bcname() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
  return bt_bcname_.GetNoArena();
}
inline void DeviceInfo::set_bt_bcname(const ::std::string& value) {
  
  bt_bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
#if LANG_CXX11
inline void DeviceInfo::set_bt_bcname(::std::string&& value) {
  
  bt_bcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
#endif
inline void DeviceInfo::set_bt_bcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bt_bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
inline void DeviceInfo::set_bt_bcname(const char* value, size_t size) {
  
  bt_bcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}
inline ::std::string* DeviceInfo::mutable_bt_bcname() {
  
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
  return bt_bcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_bt_bcname() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
  
  return bt_bcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_bt_bcname(::std::string* bt_bcname) {
  if (bt_bcname != NULL) {
    
  } else {
    
  }
  bt_bcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bt_bcname);
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.DeviceInfo.bt_BCName)
}

// uint32 sleepTime = 6;
inline void DeviceInfo::clear_sleeptime() {
  sleeptime_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::sleeptime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.sleepTime)
  return sleeptime_;
}
inline void DeviceInfo::set_sleeptime(::google::protobuf::uint32 value) {
  
  sleeptime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.sleepTime)
}

// int32 timeZone = 7;
inline void DeviceInfo::clear_timezone() {
  timezone_ = 0;
}
inline ::google::protobuf::int32 DeviceInfo::timezone() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.timeZone)
  return timezone_;
}
inline void DeviceInfo::set_timezone(::google::protobuf::int32 value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.timeZone)
}

// .com.shanghai3h.protobuf.Language lang = 8;
inline void DeviceInfo::clear_lang() {
  lang_ = 0;
}
inline ::com::shanghai3h::protobuf::Language DeviceInfo::lang() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.lang)
  return static_cast< ::com::shanghai3h::protobuf::Language >(lang_);
}
inline void DeviceInfo::set_lang(::com::shanghai3h::protobuf::Language value) {
  
  lang_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.lang)
}

// uint32 diskMaxSize = 9;
inline void DeviceInfo::clear_diskmaxsize() {
  diskmaxsize_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::diskmaxsize() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.diskMaxSize)
  return diskmaxsize_;
}
inline void DeviceInfo::set_diskmaxsize(::google::protobuf::uint32 value) {
  
  diskmaxsize_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.diskMaxSize)
}

// uint32 diskFreeSpace = 10;
inline void DeviceInfo::clear_diskfreespace() {
  diskfreespace_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::diskfreespace() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.diskFreeSpace)
  return diskfreespace_;
}
inline void DeviceInfo::set_diskfreespace(::google::protobuf::uint32 value) {
  
  diskfreespace_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.diskFreeSpace)
}

// uint32 bat_total = 16;
inline void DeviceInfo::clear_bat_total() {
  bat_total_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::bat_total() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.bat_total)
  return bat_total_;
}
inline void DeviceInfo::set_bat_total(::google::protobuf::uint32 value) {
  
  bat_total_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.bat_total)
}

// uint32 bat_remain = 17;
inline void DeviceInfo::clear_bat_remain() {
  bat_remain_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::bat_remain() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.bat_remain)
  return bat_remain_;
}
inline void DeviceInfo::set_bat_remain(::google::protobuf::uint32 value) {
  
  bat_remain_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.bat_remain)
}

// double longitude = 11;
inline void DeviceInfo::clear_longitude() {
  longitude_ = 0;
}
inline double DeviceInfo::longitude() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.longitude)
  return longitude_;
}
inline void DeviceInfo::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.longitude)
}

// double latitude = 12;
inline void DeviceInfo::clear_latitude() {
  latitude_ = 0;
}
inline double DeviceInfo::latitude() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.latitude)
  return latitude_;
}
inline void DeviceInfo::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.latitude)
}

// bool cacheMode = 13;
inline void DeviceInfo::clear_cachemode() {
  cachemode_ = false;
}
inline bool DeviceInfo::cachemode() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.DeviceInfo.cacheMode)
  return cachemode_;
}
inline void DeviceInfo::set_cachemode(bool value) {
  
  cachemode_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.DeviceInfo.cacheMode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::shanghai3h::protobuf::Language> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::shanghai3h::protobuf::Language>() {
  return ::com::shanghai3h::protobuf::Language_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Device_2eproto__INCLUDED
