// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: History.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "History.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace shanghai3h {
namespace protobuf {
class HistoryInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HistoryInfo> {
} _HistoryInfo_default_instance_;
class HistoryCatalogueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HistoryCatalogue> {
} _HistoryCatalogue_default_instance_;
class HistoryRawDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HistoryRaw> {
  public:
  const ::com::shanghai3h::protobuf::SensorData* sendata_;
} _HistoryRaw_default_instance_;
class HistoryRawMenuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HistoryRawMenu> {
} _HistoryRawMenu_default_instance_;

namespace protobuf_History_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInfo, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInfo, total_byte_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryCatalogue, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryCatalogue, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryCatalogue, infolist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRaw, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRaw, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HistoryRaw_default_instance_), sendata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRaw, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRawMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRawMenu, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRawMenu, sen_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRawMenu, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRawMenu, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRawMenu, raws_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(HistoryInfo)},
  { 7, -1, sizeof(HistoryCatalogue)},
  { 15, -1, sizeof(HistoryRaw)},
  { 23, -1, sizeof(HistoryRawMenu)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistoryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistoryCatalogue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistoryRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistoryRawMenu_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "History.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _HistoryInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HistoryCatalogue_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _HistoryRaw_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _HistoryRawMenu_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::shanghai3h::protobuf::protobuf_Task_2eproto::InitDefaults();
  ::com::shanghai3h::protobuf::protobuf_Sensor_2eproto::InitDefaults();
  _HistoryInfo_default_instance_.DefaultConstruct();
  _HistoryCatalogue_default_instance_.DefaultConstruct();
  _HistoryRaw_default_instance_.DefaultConstruct();
  _HistoryRawMenu_default_instance_.DefaultConstruct();
  _HistoryInfo_default_instance_.get_mutable()->info_ = const_cast< ::com::shanghai3h::protobuf::TaskInfo*>(
      ::com::shanghai3h::protobuf::TaskInfo::internal_default_instance());
  _HistoryRaw_default_instance_.sendata_ = const_cast< ::com::shanghai3h::protobuf::SensorData*>(
      ::com::shanghai3h::protobuf::SensorData::internal_default_instance());
  _HistoryRawMenu_default_instance_.get_mutable()->info_ = const_cast< ::com::shanghai3h::protobuf::HistoryInfo*>(
      ::com::shanghai3h::protobuf::HistoryInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rHistory.proto\022\027com.shanghai3h.protobuf"
      "\032\nTask.proto\032\014Sensor.proto\"R\n\013HistoryInf"
      "o\022/\n\004info\030\001 \001(\0132!.com.shanghai3h.protobu"
      "f.TaskInfo\022\022\n\ntotal_byte\030\004 \001(\r\"h\n\020Histor"
      "yCatalogue\022\r\n\005index\030\001 \001(\r\022\r\n\005count\030\002 \001(\r"
      "\0226\n\010infoList\030\003 \003(\0132$.com.shanghai3h.prot"
      "obuf.HistoryInfo\"_\n\nHistoryRaw\022\021\n\ttimest"
      "amp\030\001 \001(\r\0226\n\007senData\030\002 \001(\0132#.com.shangha"
      "i3h.protobuf.SensorDataH\000B\006\n\004data\"\245\001\n\016Hi"
      "storyRawMenu\0222\n\004info\030\001 \001(\0132$.com.shangha"
      "i3h.protobuf.HistoryInfo\022\016\n\006sen_id\030\005 \001(\005"
      "\022\r\n\005index\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\0221\n\004raws\030\004"
      " \003(\0132#.com.shanghai3h.protobuf.HistoryRa"
      "wB\017B\rHistoryProbufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 546);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "History.proto", &protobuf_RegisterTypes);
  ::com::shanghai3h::protobuf::protobuf_Task_2eproto::AddDescriptors();
  ::com::shanghai3h::protobuf::protobuf_Sensor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_History_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryInfo::kInfoFieldNumber;
const int HistoryInfo::kTotalByteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryInfo::HistoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_History_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.HistoryInfo)
}
HistoryInfo::HistoryInfo(const HistoryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::shanghai3h::protobuf::TaskInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  total_byte_ = from.total_byte_;
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.HistoryInfo)
}

void HistoryInfo::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&total_byte_) -
    reinterpret_cast<char*>(&info_) + sizeof(total_byte_));
  _cached_size_ = 0;
}

HistoryInfo::~HistoryInfo() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.HistoryInfo)
  SharedDtor();
}

void HistoryInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void HistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryInfo::descriptor() {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoryInfo& HistoryInfo::default_instance() {
  protobuf_History_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistoryInfo* HistoryInfo::New(::google::protobuf::Arena* arena) const {
  HistoryInfo* n = new HistoryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.HistoryInfo)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  total_byte_ = 0u;
}

bool HistoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.HistoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.shanghai3h.protobuf.TaskInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_byte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.HistoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.HistoryInfo)
  return false;
#undef DO_
}

void HistoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.HistoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.TaskInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // uint32 total_byte = 4;
  if (this->total_byte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_byte(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.HistoryInfo)
}

::google::protobuf::uint8* HistoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.HistoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.TaskInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // uint32 total_byte = 4;
  if (this->total_byte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_byte(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.HistoryInfo)
  return target;
}

size_t HistoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.HistoryInfo)
  size_t total_size = 0;

  // .com.shanghai3h.protobuf.TaskInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // uint32 total_byte = 4;
  if (this->total_byte() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_byte());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.HistoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.HistoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.HistoryInfo)
    MergeFrom(*source);
  }
}

void HistoryInfo::MergeFrom(const HistoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.HistoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::com::shanghai3h::protobuf::TaskInfo::MergeFrom(from.info());
  }
  if (from.total_byte() != 0) {
    set_total_byte(from.total_byte());
  }
}

void HistoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.HistoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryInfo::CopyFrom(const HistoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.HistoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryInfo::IsInitialized() const {
  return true;
}

void HistoryInfo::Swap(HistoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryInfo::InternalSwap(HistoryInfo* other) {
  std::swap(info_, other->info_);
  std::swap(total_byte_, other->total_byte_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryInfo::GetMetadata() const {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryInfo

// .com.shanghai3h.protobuf.TaskInfo info = 1;
bool HistoryInfo::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void HistoryInfo::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::com::shanghai3h::protobuf::TaskInfo& HistoryInfo::info() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryInfo.info)
  return info_ != NULL ? *info_
                         : *::com::shanghai3h::protobuf::TaskInfo::internal_default_instance();
}
::com::shanghai3h::protobuf::TaskInfo* HistoryInfo::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::com::shanghai3h::protobuf::TaskInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryInfo.info)
  return info_;
}
::com::shanghai3h::protobuf::TaskInfo* HistoryInfo::release_info() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.HistoryInfo.info)
  
  ::com::shanghai3h::protobuf::TaskInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void HistoryInfo::set_allocated_info(::com::shanghai3h::protobuf::TaskInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.HistoryInfo.info)
}

// uint32 total_byte = 4;
void HistoryInfo::clear_total_byte() {
  total_byte_ = 0u;
}
::google::protobuf::uint32 HistoryInfo::total_byte() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryInfo.total_byte)
  return total_byte_;
}
void HistoryInfo::set_total_byte(::google::protobuf::uint32 value) {
  
  total_byte_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryInfo.total_byte)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryCatalogue::kIndexFieldNumber;
const int HistoryCatalogue::kCountFieldNumber;
const int HistoryCatalogue::kInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryCatalogue::HistoryCatalogue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_History_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.HistoryCatalogue)
}
HistoryCatalogue::HistoryCatalogue(const HistoryCatalogue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infolist_(from.infolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.HistoryCatalogue)
}

void HistoryCatalogue::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_) + sizeof(count_));
  _cached_size_ = 0;
}

HistoryCatalogue::~HistoryCatalogue() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.HistoryCatalogue)
  SharedDtor();
}

void HistoryCatalogue::SharedDtor() {
}

void HistoryCatalogue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryCatalogue::descriptor() {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoryCatalogue& HistoryCatalogue::default_instance() {
  protobuf_History_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistoryCatalogue* HistoryCatalogue::New(::google::protobuf::Arena* arena) const {
  HistoryCatalogue* n = new HistoryCatalogue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.HistoryCatalogue)
  infolist_.Clear();
  ::memset(&index_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_) + sizeof(count_));
}

bool HistoryCatalogue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.HistoryCatalogue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.HistoryCatalogue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.HistoryCatalogue)
  return false;
#undef DO_
}

void HistoryCatalogue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.HistoryCatalogue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
  for (unsigned int i = 0, n = this->infolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infolist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.HistoryCatalogue)
}

::google::protobuf::uint8* HistoryCatalogue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.HistoryCatalogue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
  for (unsigned int i = 0, n = this->infolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->infolist(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.HistoryCatalogue)
  return target;
}

size_t HistoryCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.HistoryCatalogue)
  size_t total_size = 0;

  // repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
  {
    unsigned int count = this->infolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infolist(i));
    }
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryCatalogue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.HistoryCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryCatalogue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryCatalogue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.HistoryCatalogue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.HistoryCatalogue)
    MergeFrom(*source);
  }
}

void HistoryCatalogue::MergeFrom(const HistoryCatalogue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.HistoryCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infolist_.MergeFrom(from.infolist_);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void HistoryCatalogue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.HistoryCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryCatalogue::CopyFrom(const HistoryCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.HistoryCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryCatalogue::IsInitialized() const {
  return true;
}

void HistoryCatalogue::Swap(HistoryCatalogue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryCatalogue::InternalSwap(HistoryCatalogue* other) {
  infolist_.InternalSwap(&other->infolist_);
  std::swap(index_, other->index_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryCatalogue::GetMetadata() const {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryCatalogue

// uint32 index = 1;
void HistoryCatalogue::clear_index() {
  index_ = 0u;
}
::google::protobuf::uint32 HistoryCatalogue::index() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryCatalogue.index)
  return index_;
}
void HistoryCatalogue::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryCatalogue.index)
}

// uint32 count = 2;
void HistoryCatalogue::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 HistoryCatalogue::count() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryCatalogue.count)
  return count_;
}
void HistoryCatalogue::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryCatalogue.count)
}

// repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
int HistoryCatalogue::infolist_size() const {
  return infolist_.size();
}
void HistoryCatalogue::clear_infolist() {
  infolist_.Clear();
}
const ::com::shanghai3h::protobuf::HistoryInfo& HistoryCatalogue::infolist(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_.Get(index);
}
::com::shanghai3h::protobuf::HistoryInfo* HistoryCatalogue::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_.Mutable(index);
}
::com::shanghai3h::protobuf::HistoryInfo* HistoryCatalogue::add_infolist() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo >*
HistoryCatalogue::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return &infolist_;
}
const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo >&
HistoryCatalogue::infolist() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryRaw::kTimestampFieldNumber;
const int HistoryRaw::kSenDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryRaw::HistoryRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_History_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.HistoryRaw)
}
HistoryRaw::HistoryRaw(const HistoryRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kSenData: {
      mutable_sendata()->::com::shanghai3h::protobuf::SensorData::MergeFrom(from.sendata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.HistoryRaw)
}

void HistoryRaw::SharedCtor() {
  timestamp_ = 0u;
  clear_has_data();
  _cached_size_ = 0;
}

HistoryRaw::~HistoryRaw() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.HistoryRaw)
  SharedDtor();
}

void HistoryRaw::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void HistoryRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRaw::descriptor() {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoryRaw& HistoryRaw::default_instance() {
  protobuf_History_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistoryRaw* HistoryRaw::New(::google::protobuf::Arena* arena) const {
  HistoryRaw* n = new HistoryRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryRaw::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:com.shanghai3h.protobuf.HistoryRaw)
  switch (data_case()) {
    case kSenData: {
      delete data_.sendata_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void HistoryRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.HistoryRaw)
  timestamp_ = 0u;
  clear_data();
}

bool HistoryRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.HistoryRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.SensorData senData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.HistoryRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.HistoryRaw)
  return false;
#undef DO_
}

void HistoryRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.HistoryRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // .com.shanghai3h.protobuf.SensorData senData = 2;
  if (has_sendata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *data_.sendata_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.HistoryRaw)
}

::google::protobuf::uint8* HistoryRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.HistoryRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // .com.shanghai3h.protobuf.SensorData senData = 2;
  if (has_sendata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *data_.sendata_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.HistoryRaw)
  return target;
}

size_t HistoryRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.HistoryRaw)
  size_t total_size = 0;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  switch (data_case()) {
    // .com.shanghai3h.protobuf.SensorData senData = 2;
    case kSenData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.sendata_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.HistoryRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.HistoryRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.HistoryRaw)
    MergeFrom(*source);
  }
}

void HistoryRaw::MergeFrom(const HistoryRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.HistoryRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.data_case()) {
    case kSenData: {
      mutable_sendata()->::com::shanghai3h::protobuf::SensorData::MergeFrom(from.sendata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void HistoryRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.HistoryRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRaw::CopyFrom(const HistoryRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.HistoryRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRaw::IsInitialized() const {
  return true;
}

void HistoryRaw::Swap(HistoryRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryRaw::InternalSwap(HistoryRaw* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryRaw::GetMetadata() const {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryRaw

// uint32 timestamp = 1;
void HistoryRaw::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 HistoryRaw::timestamp() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRaw.timestamp)
  return timestamp_;
}
void HistoryRaw::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRaw.timestamp)
}

// .com.shanghai3h.protobuf.SensorData senData = 2;
bool HistoryRaw::has_sendata() const {
  return data_case() == kSenData;
}
void HistoryRaw::set_has_sendata() {
  _oneof_case_[0] = kSenData;
}
void HistoryRaw::clear_sendata() {
  if (has_sendata()) {
    delete data_.sendata_;
    clear_has_data();
  }
}
 const ::com::shanghai3h::protobuf::SensorData& HistoryRaw::sendata() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRaw.senData)
  return has_sendata()
      ? *data_.sendata_
      : ::com::shanghai3h::protobuf::SensorData::default_instance();
}
::com::shanghai3h::protobuf::SensorData* HistoryRaw::mutable_sendata() {
  if (!has_sendata()) {
    clear_data();
    set_has_sendata();
    data_.sendata_ = new ::com::shanghai3h::protobuf::SensorData;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryRaw.senData)
  return data_.sendata_;
}
::com::shanghai3h::protobuf::SensorData* HistoryRaw::release_sendata() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.HistoryRaw.senData)
  if (has_sendata()) {
    clear_has_data();
    ::com::shanghai3h::protobuf::SensorData* temp = data_.sendata_;
    data_.sendata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HistoryRaw::set_allocated_sendata(::com::shanghai3h::protobuf::SensorData* sendata) {
  clear_data();
  if (sendata) {
    set_has_sendata();
    data_.sendata_ = sendata;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.HistoryRaw.senData)
}

bool HistoryRaw::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void HistoryRaw::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
HistoryRaw::DataCase HistoryRaw::data_case() const {
  return HistoryRaw::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryRawMenu::kInfoFieldNumber;
const int HistoryRawMenu::kSenIdFieldNumber;
const int HistoryRawMenu::kIndexFieldNumber;
const int HistoryRawMenu::kCountFieldNumber;
const int HistoryRawMenu::kRawsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryRawMenu::HistoryRawMenu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_History_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.HistoryRawMenu)
}
HistoryRawMenu::HistoryRawMenu(const HistoryRawMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      raws_(from.raws_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::com::shanghai3h::protobuf::HistoryInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&sen_id_) -
    reinterpret_cast<char*>(&index_) + sizeof(sen_id_));
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.HistoryRawMenu)
}

void HistoryRawMenu::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&sen_id_) -
    reinterpret_cast<char*>(&info_) + sizeof(sen_id_));
  _cached_size_ = 0;
}

HistoryRawMenu::~HistoryRawMenu() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.HistoryRawMenu)
  SharedDtor();
}

void HistoryRawMenu::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void HistoryRawMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRawMenu::descriptor() {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoryRawMenu& HistoryRawMenu::default_instance() {
  protobuf_History_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistoryRawMenu* HistoryRawMenu::New(::google::protobuf::Arena* arena) const {
  HistoryRawMenu* n = new HistoryRawMenu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryRawMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.HistoryRawMenu)
  raws_.Clear();
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  ::memset(&index_, 0, reinterpret_cast<char*>(&sen_id_) -
    reinterpret_cast<char*>(&index_) + sizeof(sen_id_));
}

bool HistoryRawMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.HistoryRawMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.shanghai3h.protobuf.HistoryInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sen_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sen_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.HistoryRawMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.HistoryRawMenu)
  return false;
#undef DO_
}

void HistoryRawMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.HistoryRawMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.HistoryInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
  for (unsigned int i = 0, n = this->raws_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->raws(i), output);
  }

  // int32 sen_id = 5;
  if (this->sen_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sen_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.HistoryRawMenu)
}

::google::protobuf::uint8* HistoryRawMenu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.HistoryRawMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.HistoryInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
  for (unsigned int i = 0, n = this->raws_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->raws(i), deterministic, target);
  }

  // int32 sen_id = 5;
  if (this->sen_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sen_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.HistoryRawMenu)
  return target;
}

size_t HistoryRawMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.HistoryRawMenu)
  size_t total_size = 0;

  // repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
  {
    unsigned int count = this->raws_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raws(i));
    }
  }

  // .com.shanghai3h.protobuf.HistoryInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // int32 sen_id = 5;
  if (this->sen_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sen_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRawMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.HistoryRawMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryRawMenu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryRawMenu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.HistoryRawMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.HistoryRawMenu)
    MergeFrom(*source);
  }
}

void HistoryRawMenu::MergeFrom(const HistoryRawMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.HistoryRawMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raws_.MergeFrom(from.raws_);
  if (from.has_info()) {
    mutable_info()->::com::shanghai3h::protobuf::HistoryInfo::MergeFrom(from.info());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.sen_id() != 0) {
    set_sen_id(from.sen_id());
  }
}

void HistoryRawMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.HistoryRawMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRawMenu::CopyFrom(const HistoryRawMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.HistoryRawMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRawMenu::IsInitialized() const {
  return true;
}

void HistoryRawMenu::Swap(HistoryRawMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryRawMenu::InternalSwap(HistoryRawMenu* other) {
  raws_.InternalSwap(&other->raws_);
  std::swap(info_, other->info_);
  std::swap(index_, other->index_);
  std::swap(count_, other->count_);
  std::swap(sen_id_, other->sen_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryRawMenu::GetMetadata() const {
  protobuf_History_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_History_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryRawMenu

// .com.shanghai3h.protobuf.HistoryInfo info = 1;
bool HistoryRawMenu::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void HistoryRawMenu::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::com::shanghai3h::protobuf::HistoryInfo& HistoryRawMenu::info() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.info)
  return info_ != NULL ? *info_
                         : *::com::shanghai3h::protobuf::HistoryInfo::internal_default_instance();
}
::com::shanghai3h::protobuf::HistoryInfo* HistoryRawMenu::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::com::shanghai3h::protobuf::HistoryInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryRawMenu.info)
  return info_;
}
::com::shanghai3h::protobuf::HistoryInfo* HistoryRawMenu::release_info() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.HistoryRawMenu.info)
  
  ::com::shanghai3h::protobuf::HistoryInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void HistoryRawMenu::set_allocated_info(::com::shanghai3h::protobuf::HistoryInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.HistoryRawMenu.info)
}

// int32 sen_id = 5;
void HistoryRawMenu::clear_sen_id() {
  sen_id_ = 0;
}
::google::protobuf::int32 HistoryRawMenu::sen_id() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.sen_id)
  return sen_id_;
}
void HistoryRawMenu::set_sen_id(::google::protobuf::int32 value) {
  
  sen_id_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRawMenu.sen_id)
}

// uint32 index = 2;
void HistoryRawMenu::clear_index() {
  index_ = 0u;
}
::google::protobuf::uint32 HistoryRawMenu::index() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.index)
  return index_;
}
void HistoryRawMenu::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRawMenu.index)
}

// uint32 count = 3;
void HistoryRawMenu::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 HistoryRawMenu::count() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.count)
  return count_;
}
void HistoryRawMenu::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRawMenu.count)
}

// repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
int HistoryRawMenu::raws_size() const {
  return raws_.size();
}
void HistoryRawMenu::clear_raws() {
  raws_.Clear();
}
const ::com::shanghai3h::protobuf::HistoryRaw& HistoryRawMenu::raws(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_.Get(index);
}
::com::shanghai3h::protobuf::HistoryRaw* HistoryRawMenu::mutable_raws(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_.Mutable(index);
}
::com::shanghai3h::protobuf::HistoryRaw* HistoryRawMenu::add_raws() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw >*
HistoryRawMenu::mutable_raws() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return &raws_;
}
const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw >&
HistoryRawMenu::raws() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

// @@protoc_insertion_point(global_scope)
