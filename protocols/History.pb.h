// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: History.proto

#ifndef PROTOBUF_History_2eproto__INCLUDED
#define PROTOBUF_History_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Task.pb.h"
#include "Sensor.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace shanghai3h {
namespace protobuf {
class HistoryCatalogue;
class HistoryCatalogueDefaultTypeInternal;
extern HistoryCatalogueDefaultTypeInternal _HistoryCatalogue_default_instance_;
class HistoryInfo;
class HistoryInfoDefaultTypeInternal;
extern HistoryInfoDefaultTypeInternal _HistoryInfo_default_instance_;
class HistoryRaw;
class HistoryRawDefaultTypeInternal;
extern HistoryRawDefaultTypeInternal _HistoryRaw_default_instance_;
class HistoryRawMenu;
class HistoryRawMenuDefaultTypeInternal;
extern HistoryRawMenuDefaultTypeInternal _HistoryRawMenu_default_instance_;
class PressureSensorOption;
class PressureSensorOptionDefaultTypeInternal;
extern PressureSensorOptionDefaultTypeInternal _PressureSensorOption_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class SensorInfo;
class SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
class SensorInfoList;
class SensorInfoListDefaultTypeInternal;
extern SensorInfoListDefaultTypeInternal _SensorInfoList_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
class TaskInfoList;
class TaskInfoListDefaultTypeInternal;
extern TaskInfoListDefaultTypeInternal _TaskInfoList_default_instance_;
}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

namespace com {
namespace shanghai3h {
namespace protobuf {

namespace protobuf_History_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_History_2eproto

// ===================================================================

class HistoryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.HistoryInfo) */ {
 public:
  HistoryInfo();
  virtual ~HistoryInfo();

  HistoryInfo(const HistoryInfo& from);

  inline HistoryInfo& operator=(const HistoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryInfo& default_instance();

  static inline const HistoryInfo* internal_default_instance() {
    return reinterpret_cast<const HistoryInfo*>(
               &_HistoryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HistoryInfo* other);

  // implements Message ----------------------------------------------

  inline HistoryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  HistoryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HistoryInfo& from);
  void MergeFrom(const HistoryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HistoryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.shanghai3h.protobuf.TaskInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::com::shanghai3h::protobuf::TaskInfo& info() const;
  ::com::shanghai3h::protobuf::TaskInfo* mutable_info();
  ::com::shanghai3h::protobuf::TaskInfo* release_info();
  void set_allocated_info(::com::shanghai3h::protobuf::TaskInfo* info);

  // uint32 total_byte = 4;
  void clear_total_byte();
  static const int kTotalByteFieldNumber = 4;
  ::google::protobuf::uint32 total_byte() const;
  void set_total_byte(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.HistoryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::shanghai3h::protobuf::TaskInfo* info_;
  ::google::protobuf::uint32 total_byte_;
  mutable int _cached_size_;
  friend struct protobuf_History_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HistoryCatalogue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.HistoryCatalogue) */ {
 public:
  HistoryCatalogue();
  virtual ~HistoryCatalogue();

  HistoryCatalogue(const HistoryCatalogue& from);

  inline HistoryCatalogue& operator=(const HistoryCatalogue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryCatalogue& default_instance();

  static inline const HistoryCatalogue* internal_default_instance() {
    return reinterpret_cast<const HistoryCatalogue*>(
               &_HistoryCatalogue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HistoryCatalogue* other);

  // implements Message ----------------------------------------------

  inline HistoryCatalogue* New() const PROTOBUF_FINAL { return New(NULL); }

  HistoryCatalogue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HistoryCatalogue& from);
  void MergeFrom(const HistoryCatalogue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HistoryCatalogue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
  int infolist_size() const;
  void clear_infolist();
  static const int kInfoListFieldNumber = 3;
  const ::com::shanghai3h::protobuf::HistoryInfo& infolist(int index) const;
  ::com::shanghai3h::protobuf::HistoryInfo* mutable_infolist(int index);
  ::com::shanghai3h::protobuf::HistoryInfo* add_infolist();
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo >*
      mutable_infolist();
  const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo >&
      infolist() const;

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.HistoryCatalogue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo > infolist_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend struct protobuf_History_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HistoryRaw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.HistoryRaw) */ {
 public:
  HistoryRaw();
  virtual ~HistoryRaw();

  HistoryRaw(const HistoryRaw& from);

  inline HistoryRaw& operator=(const HistoryRaw& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryRaw& default_instance();

  enum DataCase {
    kSenData = 2,
    DATA_NOT_SET = 0,
  };

  static inline const HistoryRaw* internal_default_instance() {
    return reinterpret_cast<const HistoryRaw*>(
               &_HistoryRaw_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HistoryRaw* other);

  // implements Message ----------------------------------------------

  inline HistoryRaw* New() const PROTOBUF_FINAL { return New(NULL); }

  HistoryRaw* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HistoryRaw& from);
  void MergeFrom(const HistoryRaw& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HistoryRaw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // .com.shanghai3h.protobuf.SensorData senData = 2;
  bool has_sendata() const;
  void clear_sendata();
  static const int kSenDataFieldNumber = 2;
  const ::com::shanghai3h::protobuf::SensorData& sendata() const;
  ::com::shanghai3h::protobuf::SensorData* mutable_sendata();
  ::com::shanghai3h::protobuf::SensorData* release_sendata();
  void set_allocated_sendata(::com::shanghai3h::protobuf::SensorData* sendata);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.HistoryRaw)
 private:
  void set_has_sendata();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 timestamp_;
  union DataUnion {
    DataUnion() {}
    ::com::shanghai3h::protobuf::SensorData* sendata_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_History_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HistoryRawMenu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.shanghai3h.protobuf.HistoryRawMenu) */ {
 public:
  HistoryRawMenu();
  virtual ~HistoryRawMenu();

  HistoryRawMenu(const HistoryRawMenu& from);

  inline HistoryRawMenu& operator=(const HistoryRawMenu& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryRawMenu& default_instance();

  static inline const HistoryRawMenu* internal_default_instance() {
    return reinterpret_cast<const HistoryRawMenu*>(
               &_HistoryRawMenu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HistoryRawMenu* other);

  // implements Message ----------------------------------------------

  inline HistoryRawMenu* New() const PROTOBUF_FINAL { return New(NULL); }

  HistoryRawMenu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HistoryRawMenu& from);
  void MergeFrom(const HistoryRawMenu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HistoryRawMenu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
  int raws_size() const;
  void clear_raws();
  static const int kRawsFieldNumber = 4;
  const ::com::shanghai3h::protobuf::HistoryRaw& raws(int index) const;
  ::com::shanghai3h::protobuf::HistoryRaw* mutable_raws(int index);
  ::com::shanghai3h::protobuf::HistoryRaw* add_raws();
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw >*
      mutable_raws();
  const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw >&
      raws() const;

  // .com.shanghai3h.protobuf.HistoryInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::com::shanghai3h::protobuf::HistoryInfo& info() const;
  ::com::shanghai3h::protobuf::HistoryInfo* mutable_info();
  ::com::shanghai3h::protobuf::HistoryInfo* release_info();
  void set_allocated_info(::com::shanghai3h::protobuf::HistoryInfo* info);

  // uint32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // int32 sen_id = 5;
  void clear_sen_id();
  static const int kSenIdFieldNumber = 5;
  ::google::protobuf::int32 sen_id() const;
  void set_sen_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.shanghai3h.protobuf.HistoryRawMenu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw > raws_;
  ::com::shanghai3h::protobuf::HistoryInfo* info_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::int32 sen_id_;
  mutable int _cached_size_;
  friend struct protobuf_History_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryInfo

// .com.shanghai3h.protobuf.TaskInfo info = 1;
inline bool HistoryInfo::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void HistoryInfo::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::com::shanghai3h::protobuf::TaskInfo& HistoryInfo::info() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryInfo.info)
  return info_ != NULL ? *info_
                         : *::com::shanghai3h::protobuf::TaskInfo::internal_default_instance();
}
inline ::com::shanghai3h::protobuf::TaskInfo* HistoryInfo::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::com::shanghai3h::protobuf::TaskInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryInfo.info)
  return info_;
}
inline ::com::shanghai3h::protobuf::TaskInfo* HistoryInfo::release_info() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.HistoryInfo.info)
  
  ::com::shanghai3h::protobuf::TaskInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void HistoryInfo::set_allocated_info(::com::shanghai3h::protobuf::TaskInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.HistoryInfo.info)
}

// uint32 total_byte = 4;
inline void HistoryInfo::clear_total_byte() {
  total_byte_ = 0u;
}
inline ::google::protobuf::uint32 HistoryInfo::total_byte() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryInfo.total_byte)
  return total_byte_;
}
inline void HistoryInfo::set_total_byte(::google::protobuf::uint32 value) {
  
  total_byte_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryInfo.total_byte)
}

// -------------------------------------------------------------------

// HistoryCatalogue

// uint32 index = 1;
inline void HistoryCatalogue::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 HistoryCatalogue::index() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryCatalogue.index)
  return index_;
}
inline void HistoryCatalogue::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryCatalogue.index)
}

// uint32 count = 2;
inline void HistoryCatalogue::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 HistoryCatalogue::count() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryCatalogue.count)
  return count_;
}
inline void HistoryCatalogue::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryCatalogue.count)
}

// repeated .com.shanghai3h.protobuf.HistoryInfo infoList = 3;
inline int HistoryCatalogue::infolist_size() const {
  return infolist_.size();
}
inline void HistoryCatalogue::clear_infolist() {
  infolist_.Clear();
}
inline const ::com::shanghai3h::protobuf::HistoryInfo& HistoryCatalogue::infolist(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_.Get(index);
}
inline ::com::shanghai3h::protobuf::HistoryInfo* HistoryCatalogue::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_.Mutable(index);
}
inline ::com::shanghai3h::protobuf::HistoryInfo* HistoryCatalogue::add_infolist() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo >*
HistoryCatalogue::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return &infolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryInfo >&
HistoryCatalogue::infolist() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.HistoryCatalogue.infoList)
  return infolist_;
}

// -------------------------------------------------------------------

// HistoryRaw

// uint32 timestamp = 1;
inline void HistoryRaw::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 HistoryRaw::timestamp() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRaw.timestamp)
  return timestamp_;
}
inline void HistoryRaw::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRaw.timestamp)
}

// .com.shanghai3h.protobuf.SensorData senData = 2;
inline bool HistoryRaw::has_sendata() const {
  return data_case() == kSenData;
}
inline void HistoryRaw::set_has_sendata() {
  _oneof_case_[0] = kSenData;
}
inline void HistoryRaw::clear_sendata() {
  if (has_sendata()) {
    delete data_.sendata_;
    clear_has_data();
  }
}
inline  const ::com::shanghai3h::protobuf::SensorData& HistoryRaw::sendata() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRaw.senData)
  return has_sendata()
      ? *data_.sendata_
      : ::com::shanghai3h::protobuf::SensorData::default_instance();
}
inline ::com::shanghai3h::protobuf::SensorData* HistoryRaw::mutable_sendata() {
  if (!has_sendata()) {
    clear_data();
    set_has_sendata();
    data_.sendata_ = new ::com::shanghai3h::protobuf::SensorData;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryRaw.senData)
  return data_.sendata_;
}
inline ::com::shanghai3h::protobuf::SensorData* HistoryRaw::release_sendata() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.HistoryRaw.senData)
  if (has_sendata()) {
    clear_has_data();
    ::com::shanghai3h::protobuf::SensorData* temp = data_.sendata_;
    data_.sendata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HistoryRaw::set_allocated_sendata(::com::shanghai3h::protobuf::SensorData* sendata) {
  clear_data();
  if (sendata) {
    set_has_sendata();
    data_.sendata_ = sendata;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.HistoryRaw.senData)
}

inline bool HistoryRaw::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void HistoryRaw::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline HistoryRaw::DataCase HistoryRaw::data_case() const {
  return HistoryRaw::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HistoryRawMenu

// .com.shanghai3h.protobuf.HistoryInfo info = 1;
inline bool HistoryRawMenu::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void HistoryRawMenu::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::com::shanghai3h::protobuf::HistoryInfo& HistoryRawMenu::info() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.info)
  return info_ != NULL ? *info_
                         : *::com::shanghai3h::protobuf::HistoryInfo::internal_default_instance();
}
inline ::com::shanghai3h::protobuf::HistoryInfo* HistoryRawMenu::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::com::shanghai3h::protobuf::HistoryInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryRawMenu.info)
  return info_;
}
inline ::com::shanghai3h::protobuf::HistoryInfo* HistoryRawMenu::release_info() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.HistoryRawMenu.info)
  
  ::com::shanghai3h::protobuf::HistoryInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void HistoryRawMenu::set_allocated_info(::com::shanghai3h::protobuf::HistoryInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.HistoryRawMenu.info)
}

// int32 sen_id = 5;
inline void HistoryRawMenu::clear_sen_id() {
  sen_id_ = 0;
}
inline ::google::protobuf::int32 HistoryRawMenu::sen_id() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.sen_id)
  return sen_id_;
}
inline void HistoryRawMenu::set_sen_id(::google::protobuf::int32 value) {
  
  sen_id_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRawMenu.sen_id)
}

// uint32 index = 2;
inline void HistoryRawMenu::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 HistoryRawMenu::index() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.index)
  return index_;
}
inline void HistoryRawMenu::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRawMenu.index)
}

// uint32 count = 3;
inline void HistoryRawMenu::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 HistoryRawMenu::count() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.count)
  return count_;
}
inline void HistoryRawMenu::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.HistoryRawMenu.count)
}

// repeated .com.shanghai3h.protobuf.HistoryRaw raws = 4;
inline int HistoryRawMenu::raws_size() const {
  return raws_.size();
}
inline void HistoryRawMenu::clear_raws() {
  raws_.Clear();
}
inline const ::com::shanghai3h::protobuf::HistoryRaw& HistoryRawMenu::raws(int index) const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_.Get(index);
}
inline ::com::shanghai3h::protobuf::HistoryRaw* HistoryRawMenu::mutable_raws(int index) {
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_.Mutable(index);
}
inline ::com::shanghai3h::protobuf::HistoryRaw* HistoryRawMenu::add_raws() {
  // @@protoc_insertion_point(field_add:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw >*
HistoryRawMenu::mutable_raws() {
  // @@protoc_insertion_point(field_mutable_list:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return &raws_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::shanghai3h::protobuf::HistoryRaw >&
HistoryRawMenu::raws() const {
  // @@protoc_insertion_point(field_list:com.shanghai3h.protobuf.HistoryRawMenu.raws)
  return raws_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_History_2eproto__INCLUDED
