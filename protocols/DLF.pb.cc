// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DLF.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DLF.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace shanghai3h {
namespace protobuf {
class SH3H_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SH3H_Request> {
  public:
  ::google::protobuf::uint32 sensorid_;
  ::google::protobuf::uint32 currenttime_;
  const ::com::shanghai3h::protobuf::TaskInfo* task_;
  const ::com::shanghai3h::protobuf::DeviceInfo* devinfo_;
  const ::com::shanghai3h::protobuf::SensorInfo* seninfo_;
  const ::com::shanghai3h::protobuf::HistoryCatalogue* catalog_;
  const ::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu_;
  const ::com::shanghai3h::protobuf::HistoryInfo* hisinfo_;
} _SH3H_Request_default_instance_;
class SH3H_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SH3H_Response> {
  public:
  int echo_;
  ::google::protobuf::uint32 beatcount_;
  const ::com::shanghai3h::protobuf::DeviceInfo* devinfo_;
  const ::com::shanghai3h::protobuf::SensorInfoList* sensors_;
  const ::com::shanghai3h::protobuf::SensorData* sendata_;
  const ::com::shanghai3h::protobuf::TaskInfoList* tasks_;
  int error_;
  ::google::protobuf::uint32 historytotal_;
  const ::com::shanghai3h::protobuf::HistoryCatalogue* catalog_;
  const ::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu_;
} _SH3H_Response_default_instance_;

namespace protobuf_DLF_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Request, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), sensorid_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), currenttime_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), task_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), devinfo_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), seninfo_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), catalog_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), rawmenu_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Request_default_instance_), hisinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Request, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Response, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), echo_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), beatcount_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), devinfo_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), sensors_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), sendata_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), tasks_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), error_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), historytotal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), catalog_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SH3H_Response_default_instance_), rawmenu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SH3H_Response, resp_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SH3H_Request)},
  { 15, -1, sizeof(SH3H_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SH3H_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SH3H_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DLF.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SH3H_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SH3H_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::shanghai3h::protobuf::protobuf_Device_2eproto::InitDefaults();
  ::com::shanghai3h::protobuf::protobuf_Task_2eproto::InitDefaults();
  ::com::shanghai3h::protobuf::protobuf_Sensor_2eproto::InitDefaults();
  ::com::shanghai3h::protobuf::protobuf_History_2eproto::InitDefaults();
  _SH3H_Request_default_instance_.DefaultConstruct();
  _SH3H_Response_default_instance_.DefaultConstruct();
  _SH3H_Request_default_instance_.sensorid_ = 0u;
  _SH3H_Request_default_instance_.currenttime_ = 0u;
  _SH3H_Request_default_instance_.task_ = const_cast< ::com::shanghai3h::protobuf::TaskInfo*>(
      ::com::shanghai3h::protobuf::TaskInfo::internal_default_instance());
  _SH3H_Request_default_instance_.devinfo_ = const_cast< ::com::shanghai3h::protobuf::DeviceInfo*>(
      ::com::shanghai3h::protobuf::DeviceInfo::internal_default_instance());
  _SH3H_Request_default_instance_.seninfo_ = const_cast< ::com::shanghai3h::protobuf::SensorInfo*>(
      ::com::shanghai3h::protobuf::SensorInfo::internal_default_instance());
  _SH3H_Request_default_instance_.catalog_ = const_cast< ::com::shanghai3h::protobuf::HistoryCatalogue*>(
      ::com::shanghai3h::protobuf::HistoryCatalogue::internal_default_instance());
  _SH3H_Request_default_instance_.rawmenu_ = const_cast< ::com::shanghai3h::protobuf::HistoryRawMenu*>(
      ::com::shanghai3h::protobuf::HistoryRawMenu::internal_default_instance());
  _SH3H_Request_default_instance_.hisinfo_ = const_cast< ::com::shanghai3h::protobuf::HistoryInfo*>(
      ::com::shanghai3h::protobuf::HistoryInfo::internal_default_instance());
  _SH3H_Response_default_instance_.echo_ = 0;
  _SH3H_Response_default_instance_.beatcount_ = 0u;
  _SH3H_Response_default_instance_.devinfo_ = const_cast< ::com::shanghai3h::protobuf::DeviceInfo*>(
      ::com::shanghai3h::protobuf::DeviceInfo::internal_default_instance());
  _SH3H_Response_default_instance_.sensors_ = const_cast< ::com::shanghai3h::protobuf::SensorInfoList*>(
      ::com::shanghai3h::protobuf::SensorInfoList::internal_default_instance());
  _SH3H_Response_default_instance_.sendata_ = const_cast< ::com::shanghai3h::protobuf::SensorData*>(
      ::com::shanghai3h::protobuf::SensorData::internal_default_instance());
  _SH3H_Response_default_instance_.tasks_ = const_cast< ::com::shanghai3h::protobuf::TaskInfoList*>(
      ::com::shanghai3h::protobuf::TaskInfoList::internal_default_instance());
  _SH3H_Response_default_instance_.error_ = 0;
  _SH3H_Response_default_instance_.historytotal_ = 0u;
  _SH3H_Response_default_instance_.catalog_ = const_cast< ::com::shanghai3h::protobuf::HistoryCatalogue*>(
      ::com::shanghai3h::protobuf::HistoryCatalogue::internal_default_instance());
  _SH3H_Response_default_instance_.rawmenu_ = const_cast< ::com::shanghai3h::protobuf::HistoryRawMenu*>(
      ::com::shanghai3h::protobuf::HistoryRawMenu::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tDLF.proto\022\027com.shanghai3h.protobuf\032\014De"
      "vice.proto\032\nTask.proto\032\014Sensor.proto\032\rHi"
      "story.proto\"\312\003\n\014SH3H_Request\0222\n\004type\030\001 \001"
      "(\0162$.com.shanghai3h.protobuf.RequestType"
      "\022\022\n\010sensorID\030\002 \001(\rH\000\022\025\n\013currentTime\030\003 \001("
      "\rH\000\0221\n\004task\030\004 \001(\0132!.com.shanghai3h.proto"
      "buf.TaskInfoH\000\0226\n\007devinfo\030\005 \001(\0132#.com.sh"
      "anghai3h.protobuf.DeviceInfoH\000\0226\n\007seninf"
      "o\030\006 \001(\0132#.com.shanghai3h.protobuf.Sensor"
      "InfoH\000\022<\n\007catalog\030\007 \001(\0132).com.shanghai3h"
      ".protobuf.HistoryCatalogueH\000\022:\n\007rawMenu\030"
      "\010 \001(\0132\'.com.shanghai3h.protobuf.HistoryR"
      "awMenuH\000\0227\n\007hisInfo\030\t \001(\0132$.com.shanghai"
      "3h.protobuf.HistoryInfoH\000B\005\n\003req\"\302\004\n\rSH3"
      "H_Response\0223\n\004type\030\001 \001(\0162%.com.shanghai3"
      "h.protobuf.ResponseType\0224\n\004echo\030\013 \001(\0162$."
      "com.shanghai3h.protobuf.RequestTypeH\000\022\023\n"
      "\tbeatcount\030\002 \001(\rH\000\0226\n\007devInfo\030\003 \001(\0132#.co"
      "m.shanghai3h.protobuf.DeviceInfoH\000\022:\n\007se"
      "nsors\030\n \001(\0132\'.com.shanghai3h.protobuf.Se"
      "nsorInfoListH\000\0226\n\007senData\030\t \001(\0132#.com.sh"
      "anghai3h.protobuf.SensorDataH\000\0226\n\005tasks\030"
      "\004 \001(\0132%.com.shanghai3h.protobuf.TaskInfo"
      "ListH\000\0223\n\005error\030\005 \001(\0162\".com.shanghai3h.p"
      "rotobuf.ErrorTypeH\000\022\026\n\014historyTotal\030\006 \001("
      "\rH\000\022<\n\007catalog\030\007 \001(\0132).com.shanghai3h.pr"
      "otobuf.HistoryCatalogueH\000\022:\n\007rawMenu\030\010 \001"
      "(\0132\'.com.shanghai3h.protobuf.HistoryRawM"
      "enuH\000B\006\n\004resp*\206\001\n\tErrorType\022\013\n\007NoError\020\000"
      "\022\020\n\014TimeOutError\020\001\022\014\n\010CRCError\020\002\022\017\n\013Leng"
      "thError\020\003\022\021\n\rDIskFullError\020\004\022\027\n\023StringOv"
      "erflowError\020\005\022\017\n\013UnkownError\020\006*\261\003\n\013Reque"
      "stType\022\021\n\rReq_HeartBeat\020\000\022\022\n\016Req_DeviceI"
      "nfo\020\001\022\030\n\024Req_UpdateDeviceInfo\020\002\022\022\n\016Req_S"
      "ensorList\020\016\022\021\n\rReq_SensorAdd\020\004\022\024\n\020Req_Se"
      "nsorUpdate\020\022\022\026\n\022Req_SensorDataByID\020\r\022\030\n\024"
      "Req_SensorDeleteByID\020\023\022\020\n\014Req_TaskList\020\003"
      "\022\017\n\013Req_TaskAdd\020\006\022\022\n\016Req_TaskUpdate\020\024\022\022\n"
      "\016Req_TaskDelete\020\007\022\020\n\014Req_TaskStop\020\010\022\024\n\020R"
      "eq_HistoryTotal\020\t\022\024\n\020Req_HistoryIndex\020\n\022"
      "\026\n\022Req_HistoryRawData\020\013\022\025\n\021Req_HistoryDe"
      "lete\020\021\022\020\n\014Req_SyncTime\020\014\022\025\n\021Req_YmodenUp"
      "grade\020\017\022\021\n\rReq_PowerDown\020\020*\327\001\n\014ResponseT"
      "ype\022\016\n\nResp_Error\020\000\022\013\n\007Resp_OK\020\001\022\022\n\016Resp"
      "_HeartBeat\020\t\022\023\n\017Resp_DeviceInfo\020\002\022\023\n\017Res"
      "p_SensorList\020\003\022\022\n\016Resp_SensorVal\020\010\022\021\n\rRe"
      "sp_TaskList\020\004\022\025\n\021Resp_HistoryTotal\020\005\022\025\n\021"
      "Resp_HistoryIndex\020\006\022\027\n\023Resp_HistoryRawDa"
      "ta\020\007B\013B\tDLFProbufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1945);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DLF.proto", &protobuf_RegisterTypes);
  ::com::shanghai3h::protobuf::protobuf_Device_2eproto::AddDescriptors();
  ::com::shanghai3h::protobuf::protobuf_Task_2eproto::AddDescriptors();
  ::com::shanghai3h::protobuf::protobuf_Sensor_2eproto::AddDescriptors();
  ::com::shanghai3h::protobuf::protobuf_History_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DLF_2eproto

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_enum_descriptors[0];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_enum_descriptors[1];
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_enum_descriptors[2];
}
bool ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SH3H_Request::kTypeFieldNumber;
const int SH3H_Request::kSensorIDFieldNumber;
const int SH3H_Request::kCurrentTimeFieldNumber;
const int SH3H_Request::kTaskFieldNumber;
const int SH3H_Request::kDevinfoFieldNumber;
const int SH3H_Request::kSeninfoFieldNumber;
const int SH3H_Request::kCatalogFieldNumber;
const int SH3H_Request::kRawMenuFieldNumber;
const int SH3H_Request::kHisInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SH3H_Request::SH3H_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DLF_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.SH3H_Request)
}
SH3H_Request::SH3H_Request(const SH3H_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_req();
  switch (from.req_case()) {
    case kSensorID: {
      set_sensorid(from.sensorid());
      break;
    }
    case kCurrentTime: {
      set_currenttime(from.currenttime());
      break;
    }
    case kTask: {
      mutable_task()->::com::shanghai3h::protobuf::TaskInfo::MergeFrom(from.task());
      break;
    }
    case kDevinfo: {
      mutable_devinfo()->::com::shanghai3h::protobuf::DeviceInfo::MergeFrom(from.devinfo());
      break;
    }
    case kSeninfo: {
      mutable_seninfo()->::com::shanghai3h::protobuf::SensorInfo::MergeFrom(from.seninfo());
      break;
    }
    case kCatalog: {
      mutable_catalog()->::com::shanghai3h::protobuf::HistoryCatalogue::MergeFrom(from.catalog());
      break;
    }
    case kRawMenu: {
      mutable_rawmenu()->::com::shanghai3h::protobuf::HistoryRawMenu::MergeFrom(from.rawmenu());
      break;
    }
    case kHisInfo: {
      mutable_hisinfo()->::com::shanghai3h::protobuf::HistoryInfo::MergeFrom(from.hisinfo());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.SH3H_Request)
}

void SH3H_Request::SharedCtor() {
  type_ = 0;
  clear_has_req();
  _cached_size_ = 0;
}

SH3H_Request::~SH3H_Request() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.SH3H_Request)
  SharedDtor();
}

void SH3H_Request::SharedDtor() {
  if (has_req()) {
    clear_req();
  }
}

void SH3H_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SH3H_Request::descriptor() {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SH3H_Request& SH3H_Request::default_instance() {
  protobuf_DLF_2eproto::InitDefaults();
  return *internal_default_instance();
}

SH3H_Request* SH3H_Request::New(::google::protobuf::Arena* arena) const {
  SH3H_Request* n = new SH3H_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SH3H_Request::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:com.shanghai3h.protobuf.SH3H_Request)
  switch (req_case()) {
    case kSensorID: {
      // No need to clear
      break;
    }
    case kCurrentTime: {
      // No need to clear
      break;
    }
    case kTask: {
      delete req_.task_;
      break;
    }
    case kDevinfo: {
      delete req_.devinfo_;
      break;
    }
    case kSeninfo: {
      delete req_.seninfo_;
      break;
    }
    case kCatalog: {
      delete req_.catalog_;
      break;
    }
    case kRawMenu: {
      delete req_.rawmenu_;
      break;
    }
    case kHisInfo: {
      delete req_.hisinfo_;
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQ_NOT_SET;
}


void SH3H_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.SH3H_Request)
  type_ = 0;
  clear_req();
}

bool SH3H_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.SH3H_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.shanghai3h.protobuf.RequestType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::shanghai3h::protobuf::RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensorID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_req();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_.sensorid_)));
          set_has_sensorid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 currentTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          clear_req();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_.currenttime_)));
          set_has_currenttime();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.TaskInfo task = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_catalog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rawmenu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hisinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.SH3H_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.SH3H_Request)
  return false;
#undef DO_
}

void SH3H_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.SH3H_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 sensorID = 2;
  if (has_sensorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensorid(), output);
  }

  // uint32 currentTime = 3;
  if (has_currenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currenttime(), output);
  }

  // .com.shanghai3h.protobuf.TaskInfo task = 4;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *req_.task_, output);
  }

  // .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *req_.devinfo_, output);
  }

  // .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
  if (has_seninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *req_.seninfo_, output);
  }

  // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
  if (has_catalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *req_.catalog_, output);
  }

  // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
  if (has_rawmenu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *req_.rawmenu_, output);
  }

  // .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
  if (has_hisinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *req_.hisinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.SH3H_Request)
}

::google::protobuf::uint8* SH3H_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.SH3H_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.RequestType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 sensorID = 2;
  if (has_sensorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensorid(), target);
  }

  // uint32 currentTime = 3;
  if (has_currenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currenttime(), target);
  }

  // .com.shanghai3h.protobuf.TaskInfo task = 4;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *req_.task_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *req_.devinfo_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
  if (has_seninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *req_.seninfo_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
  if (has_catalog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *req_.catalog_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
  if (has_rawmenu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *req_.rawmenu_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
  if (has_hisinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *req_.hisinfo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.SH3H_Request)
  return target;
}

size_t SH3H_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.SH3H_Request)
  size_t total_size = 0;

  // .com.shanghai3h.protobuf.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (req_case()) {
    // uint32 sensorID = 2;
    case kSensorID: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensorid());
      break;
    }
    // uint32 currentTime = 3;
    case kCurrentTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currenttime());
      break;
    }
    // .com.shanghai3h.protobuf.TaskInfo task = 4;
    case kTask: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.task_);
      break;
    }
    // .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
    case kDevinfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.devinfo_);
      break;
    }
    // .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
    case kSeninfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.seninfo_);
      break;
    }
    // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
    case kCatalog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.catalog_);
      break;
    }
    // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
    case kRawMenu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.rawmenu_);
      break;
    }
    // .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
    case kHisInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *req_.hisinfo_);
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SH3H_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.SH3H_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SH3H_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SH3H_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.SH3H_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.SH3H_Request)
    MergeFrom(*source);
  }
}

void SH3H_Request::MergeFrom(const SH3H_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.SH3H_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.req_case()) {
    case kSensorID: {
      set_sensorid(from.sensorid());
      break;
    }
    case kCurrentTime: {
      set_currenttime(from.currenttime());
      break;
    }
    case kTask: {
      mutable_task()->::com::shanghai3h::protobuf::TaskInfo::MergeFrom(from.task());
      break;
    }
    case kDevinfo: {
      mutable_devinfo()->::com::shanghai3h::protobuf::DeviceInfo::MergeFrom(from.devinfo());
      break;
    }
    case kSeninfo: {
      mutable_seninfo()->::com::shanghai3h::protobuf::SensorInfo::MergeFrom(from.seninfo());
      break;
    }
    case kCatalog: {
      mutable_catalog()->::com::shanghai3h::protobuf::HistoryCatalogue::MergeFrom(from.catalog());
      break;
    }
    case kRawMenu: {
      mutable_rawmenu()->::com::shanghai3h::protobuf::HistoryRawMenu::MergeFrom(from.rawmenu());
      break;
    }
    case kHisInfo: {
      mutable_hisinfo()->::com::shanghai3h::protobuf::HistoryInfo::MergeFrom(from.hisinfo());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
}

void SH3H_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.SH3H_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SH3H_Request::CopyFrom(const SH3H_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.SH3H_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SH3H_Request::IsInitialized() const {
  return true;
}

void SH3H_Request::Swap(SH3H_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SH3H_Request::InternalSwap(SH3H_Request* other) {
  std::swap(type_, other->type_);
  std::swap(req_, other->req_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SH3H_Request::GetMetadata() const {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SH3H_Request

// .com.shanghai3h.protobuf.RequestType type = 1;
void SH3H_Request::clear_type() {
  type_ = 0;
}
::com::shanghai3h::protobuf::RequestType SH3H_Request::type() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.type)
  return static_cast< ::com::shanghai3h::protobuf::RequestType >(type_);
}
void SH3H_Request::set_type(::com::shanghai3h::protobuf::RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Request.type)
}

// uint32 sensorID = 2;
bool SH3H_Request::has_sensorid() const {
  return req_case() == kSensorID;
}
void SH3H_Request::set_has_sensorid() {
  _oneof_case_[0] = kSensorID;
}
void SH3H_Request::clear_sensorid() {
  if (has_sensorid()) {
    req_.sensorid_ = 0u;
    clear_has_req();
  }
}
::google::protobuf::uint32 SH3H_Request::sensorid() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.sensorID)
  if (has_sensorid()) {
    return req_.sensorid_;
  }
  return 0u;
}
void SH3H_Request::set_sensorid(::google::protobuf::uint32 value) {
  if (!has_sensorid()) {
    clear_req();
    set_has_sensorid();
  }
  req_.sensorid_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Request.sensorID)
}

// uint32 currentTime = 3;
bool SH3H_Request::has_currenttime() const {
  return req_case() == kCurrentTime;
}
void SH3H_Request::set_has_currenttime() {
  _oneof_case_[0] = kCurrentTime;
}
void SH3H_Request::clear_currenttime() {
  if (has_currenttime()) {
    req_.currenttime_ = 0u;
    clear_has_req();
  }
}
::google::protobuf::uint32 SH3H_Request::currenttime() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.currentTime)
  if (has_currenttime()) {
    return req_.currenttime_;
  }
  return 0u;
}
void SH3H_Request::set_currenttime(::google::protobuf::uint32 value) {
  if (!has_currenttime()) {
    clear_req();
    set_has_currenttime();
  }
  req_.currenttime_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Request.currentTime)
}

// .com.shanghai3h.protobuf.TaskInfo task = 4;
bool SH3H_Request::has_task() const {
  return req_case() == kTask;
}
void SH3H_Request::set_has_task() {
  _oneof_case_[0] = kTask;
}
void SH3H_Request::clear_task() {
  if (has_task()) {
    delete req_.task_;
    clear_has_req();
  }
}
 const ::com::shanghai3h::protobuf::TaskInfo& SH3H_Request::task() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.task)
  return has_task()
      ? *req_.task_
      : ::com::shanghai3h::protobuf::TaskInfo::default_instance();
}
::com::shanghai3h::protobuf::TaskInfo* SH3H_Request::mutable_task() {
  if (!has_task()) {
    clear_req();
    set_has_task();
    req_.task_ = new ::com::shanghai3h::protobuf::TaskInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.task)
  return req_.task_;
}
::com::shanghai3h::protobuf::TaskInfo* SH3H_Request::release_task() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.task)
  if (has_task()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::TaskInfo* temp = req_.task_;
    req_.task_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Request::set_allocated_task(::com::shanghai3h::protobuf::TaskInfo* task) {
  clear_req();
  if (task) {
    set_has_task();
    req_.task_ = task;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.task)
}

// .com.shanghai3h.protobuf.DeviceInfo devinfo = 5;
bool SH3H_Request::has_devinfo() const {
  return req_case() == kDevinfo;
}
void SH3H_Request::set_has_devinfo() {
  _oneof_case_[0] = kDevinfo;
}
void SH3H_Request::clear_devinfo() {
  if (has_devinfo()) {
    delete req_.devinfo_;
    clear_has_req();
  }
}
 const ::com::shanghai3h::protobuf::DeviceInfo& SH3H_Request::devinfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.devinfo)
  return has_devinfo()
      ? *req_.devinfo_
      : ::com::shanghai3h::protobuf::DeviceInfo::default_instance();
}
::com::shanghai3h::protobuf::DeviceInfo* SH3H_Request::mutable_devinfo() {
  if (!has_devinfo()) {
    clear_req();
    set_has_devinfo();
    req_.devinfo_ = new ::com::shanghai3h::protobuf::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.devinfo)
  return req_.devinfo_;
}
::com::shanghai3h::protobuf::DeviceInfo* SH3H_Request::release_devinfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.devinfo)
  if (has_devinfo()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::DeviceInfo* temp = req_.devinfo_;
    req_.devinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Request::set_allocated_devinfo(::com::shanghai3h::protobuf::DeviceInfo* devinfo) {
  clear_req();
  if (devinfo) {
    set_has_devinfo();
    req_.devinfo_ = devinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.devinfo)
}

// .com.shanghai3h.protobuf.SensorInfo seninfo = 6;
bool SH3H_Request::has_seninfo() const {
  return req_case() == kSeninfo;
}
void SH3H_Request::set_has_seninfo() {
  _oneof_case_[0] = kSeninfo;
}
void SH3H_Request::clear_seninfo() {
  if (has_seninfo()) {
    delete req_.seninfo_;
    clear_has_req();
  }
}
 const ::com::shanghai3h::protobuf::SensorInfo& SH3H_Request::seninfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.seninfo)
  return has_seninfo()
      ? *req_.seninfo_
      : ::com::shanghai3h::protobuf::SensorInfo::default_instance();
}
::com::shanghai3h::protobuf::SensorInfo* SH3H_Request::mutable_seninfo() {
  if (!has_seninfo()) {
    clear_req();
    set_has_seninfo();
    req_.seninfo_ = new ::com::shanghai3h::protobuf::SensorInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.seninfo)
  return req_.seninfo_;
}
::com::shanghai3h::protobuf::SensorInfo* SH3H_Request::release_seninfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.seninfo)
  if (has_seninfo()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::SensorInfo* temp = req_.seninfo_;
    req_.seninfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Request::set_allocated_seninfo(::com::shanghai3h::protobuf::SensorInfo* seninfo) {
  clear_req();
  if (seninfo) {
    set_has_seninfo();
    req_.seninfo_ = seninfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.seninfo)
}

// .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
bool SH3H_Request::has_catalog() const {
  return req_case() == kCatalog;
}
void SH3H_Request::set_has_catalog() {
  _oneof_case_[0] = kCatalog;
}
void SH3H_Request::clear_catalog() {
  if (has_catalog()) {
    delete req_.catalog_;
    clear_has_req();
  }
}
 const ::com::shanghai3h::protobuf::HistoryCatalogue& SH3H_Request::catalog() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.catalog)
  return has_catalog()
      ? *req_.catalog_
      : ::com::shanghai3h::protobuf::HistoryCatalogue::default_instance();
}
::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Request::mutable_catalog() {
  if (!has_catalog()) {
    clear_req();
    set_has_catalog();
    req_.catalog_ = new ::com::shanghai3h::protobuf::HistoryCatalogue;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.catalog)
  return req_.catalog_;
}
::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Request::release_catalog() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.catalog)
  if (has_catalog()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::HistoryCatalogue* temp = req_.catalog_;
    req_.catalog_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Request::set_allocated_catalog(::com::shanghai3h::protobuf::HistoryCatalogue* catalog) {
  clear_req();
  if (catalog) {
    set_has_catalog();
    req_.catalog_ = catalog;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.catalog)
}

// .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
bool SH3H_Request::has_rawmenu() const {
  return req_case() == kRawMenu;
}
void SH3H_Request::set_has_rawmenu() {
  _oneof_case_[0] = kRawMenu;
}
void SH3H_Request::clear_rawmenu() {
  if (has_rawmenu()) {
    delete req_.rawmenu_;
    clear_has_req();
  }
}
 const ::com::shanghai3h::protobuf::HistoryRawMenu& SH3H_Request::rawmenu() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
  return has_rawmenu()
      ? *req_.rawmenu_
      : ::com::shanghai3h::protobuf::HistoryRawMenu::default_instance();
}
::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Request::mutable_rawmenu() {
  if (!has_rawmenu()) {
    clear_req();
    set_has_rawmenu();
    req_.rawmenu_ = new ::com::shanghai3h::protobuf::HistoryRawMenu;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
  return req_.rawmenu_;
}
::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Request::release_rawmenu() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
  if (has_rawmenu()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::HistoryRawMenu* temp = req_.rawmenu_;
    req_.rawmenu_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Request::set_allocated_rawmenu(::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu) {
  clear_req();
  if (rawmenu) {
    set_has_rawmenu();
    req_.rawmenu_ = rawmenu;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.rawMenu)
}

// .com.shanghai3h.protobuf.HistoryInfo hisInfo = 9;
bool SH3H_Request::has_hisinfo() const {
  return req_case() == kHisInfo;
}
void SH3H_Request::set_has_hisinfo() {
  _oneof_case_[0] = kHisInfo;
}
void SH3H_Request::clear_hisinfo() {
  if (has_hisinfo()) {
    delete req_.hisinfo_;
    clear_has_req();
  }
}
 const ::com::shanghai3h::protobuf::HistoryInfo& SH3H_Request::hisinfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
  return has_hisinfo()
      ? *req_.hisinfo_
      : ::com::shanghai3h::protobuf::HistoryInfo::default_instance();
}
::com::shanghai3h::protobuf::HistoryInfo* SH3H_Request::mutable_hisinfo() {
  if (!has_hisinfo()) {
    clear_req();
    set_has_hisinfo();
    req_.hisinfo_ = new ::com::shanghai3h::protobuf::HistoryInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
  return req_.hisinfo_;
}
::com::shanghai3h::protobuf::HistoryInfo* SH3H_Request::release_hisinfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
  if (has_hisinfo()) {
    clear_has_req();
    ::com::shanghai3h::protobuf::HistoryInfo* temp = req_.hisinfo_;
    req_.hisinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Request::set_allocated_hisinfo(::com::shanghai3h::protobuf::HistoryInfo* hisinfo) {
  clear_req();
  if (hisinfo) {
    set_has_hisinfo();
    req_.hisinfo_ = hisinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Request.hisInfo)
}

bool SH3H_Request::has_req() const {
  return req_case() != REQ_NOT_SET;
}
void SH3H_Request::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
SH3H_Request::ReqCase SH3H_Request::req_case() const {
  return SH3H_Request::ReqCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SH3H_Response::kTypeFieldNumber;
const int SH3H_Response::kEchoFieldNumber;
const int SH3H_Response::kBeatcountFieldNumber;
const int SH3H_Response::kDevInfoFieldNumber;
const int SH3H_Response::kSensorsFieldNumber;
const int SH3H_Response::kSenDataFieldNumber;
const int SH3H_Response::kTasksFieldNumber;
const int SH3H_Response::kErrorFieldNumber;
const int SH3H_Response::kHistoryTotalFieldNumber;
const int SH3H_Response::kCatalogFieldNumber;
const int SH3H_Response::kRawMenuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SH3H_Response::SH3H_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DLF_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.shanghai3h.protobuf.SH3H_Response)
}
SH3H_Response::SH3H_Response(const SH3H_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_resp();
  switch (from.resp_case()) {
    case kEcho: {
      set_echo(from.echo());
      break;
    }
    case kBeatcount: {
      set_beatcount(from.beatcount());
      break;
    }
    case kDevInfo: {
      mutable_devinfo()->::com::shanghai3h::protobuf::DeviceInfo::MergeFrom(from.devinfo());
      break;
    }
    case kSensors: {
      mutable_sensors()->::com::shanghai3h::protobuf::SensorInfoList::MergeFrom(from.sensors());
      break;
    }
    case kSenData: {
      mutable_sendata()->::com::shanghai3h::protobuf::SensorData::MergeFrom(from.sendata());
      break;
    }
    case kTasks: {
      mutable_tasks()->::com::shanghai3h::protobuf::TaskInfoList::MergeFrom(from.tasks());
      break;
    }
    case kError: {
      set_error(from.error());
      break;
    }
    case kHistoryTotal: {
      set_historytotal(from.historytotal());
      break;
    }
    case kCatalog: {
      mutable_catalog()->::com::shanghai3h::protobuf::HistoryCatalogue::MergeFrom(from.catalog());
      break;
    }
    case kRawMenu: {
      mutable_rawmenu()->::com::shanghai3h::protobuf::HistoryRawMenu::MergeFrom(from.rawmenu());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.shanghai3h.protobuf.SH3H_Response)
}

void SH3H_Response::SharedCtor() {
  type_ = 0;
  clear_has_resp();
  _cached_size_ = 0;
}

SH3H_Response::~SH3H_Response() {
  // @@protoc_insertion_point(destructor:com.shanghai3h.protobuf.SH3H_Response)
  SharedDtor();
}

void SH3H_Response::SharedDtor() {
  if (has_resp()) {
    clear_resp();
  }
}

void SH3H_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SH3H_Response::descriptor() {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SH3H_Response& SH3H_Response::default_instance() {
  protobuf_DLF_2eproto::InitDefaults();
  return *internal_default_instance();
}

SH3H_Response* SH3H_Response::New(::google::protobuf::Arena* arena) const {
  SH3H_Response* n = new SH3H_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SH3H_Response::clear_resp() {
// @@protoc_insertion_point(one_of_clear_start:com.shanghai3h.protobuf.SH3H_Response)
  switch (resp_case()) {
    case kEcho: {
      // No need to clear
      break;
    }
    case kBeatcount: {
      // No need to clear
      break;
    }
    case kDevInfo: {
      delete resp_.devinfo_;
      break;
    }
    case kSensors: {
      delete resp_.sensors_;
      break;
    }
    case kSenData: {
      delete resp_.sendata_;
      break;
    }
    case kTasks: {
      delete resp_.tasks_;
      break;
    }
    case kError: {
      // No need to clear
      break;
    }
    case kHistoryTotal: {
      // No need to clear
      break;
    }
    case kCatalog: {
      delete resp_.catalog_;
      break;
    }
    case kRawMenu: {
      delete resp_.rawmenu_;
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESP_NOT_SET;
}


void SH3H_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.shanghai3h.protobuf.SH3H_Response)
  type_ = 0;
  clear_resp();
}

bool SH3H_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.shanghai3h.protobuf.SH3H_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.shanghai3h.protobuf.ResponseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::shanghai3h::protobuf::ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 beatcount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resp_.beatcount_)));
          set_has_beatcount();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.ErrorType error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error(static_cast< ::com::shanghai3h::protobuf::ErrorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 historyTotal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          clear_resp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resp_.historytotal_)));
          set_has_historytotal();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_catalog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rawmenu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.SensorData senData = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.shanghai3h.protobuf.RequestType echo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_echo(static_cast< ::com::shanghai3h::protobuf::RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.shanghai3h.protobuf.SH3H_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.shanghai3h.protobuf.SH3H_Response)
  return false;
#undef DO_
}

void SH3H_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.shanghai3h.protobuf.SH3H_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.ResponseType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 beatcount = 2;
  if (has_beatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beatcount(), output);
  }

  // .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *resp_.devinfo_, output);
  }

  // .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
  if (has_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *resp_.tasks_, output);
  }

  // .com.shanghai3h.protobuf.ErrorType error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  // uint32 historyTotal = 6;
  if (has_historytotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->historytotal(), output);
  }

  // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
  if (has_catalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *resp_.catalog_, output);
  }

  // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
  if (has_rawmenu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *resp_.rawmenu_, output);
  }

  // .com.shanghai3h.protobuf.SensorData senData = 9;
  if (has_sendata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *resp_.sendata_, output);
  }

  // .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
  if (has_sensors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *resp_.sensors_, output);
  }

  // .com.shanghai3h.protobuf.RequestType echo = 11;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->echo(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.shanghai3h.protobuf.SH3H_Response)
}

::google::protobuf::uint8* SH3H_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.shanghai3h.protobuf.SH3H_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.shanghai3h.protobuf.ResponseType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 beatcount = 2;
  if (has_beatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beatcount(), target);
  }

  // .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *resp_.devinfo_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
  if (has_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *resp_.tasks_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.ErrorType error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  // uint32 historyTotal = 6;
  if (has_historytotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->historytotal(), target);
  }

  // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
  if (has_catalog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *resp_.catalog_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
  if (has_rawmenu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *resp_.rawmenu_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.SensorData senData = 9;
  if (has_sendata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *resp_.sendata_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
  if (has_sensors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *resp_.sensors_, deterministic, target);
  }

  // .com.shanghai3h.protobuf.RequestType echo = 11;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->echo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.shanghai3h.protobuf.SH3H_Response)
  return target;
}

size_t SH3H_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.shanghai3h.protobuf.SH3H_Response)
  size_t total_size = 0;

  // .com.shanghai3h.protobuf.ResponseType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (resp_case()) {
    // .com.shanghai3h.protobuf.RequestType echo = 11;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->echo());
      break;
    }
    // uint32 beatcount = 2;
    case kBeatcount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beatcount());
      break;
    }
    // .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
    case kDevInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.devinfo_);
      break;
    }
    // .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
    case kSensors: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.sensors_);
      break;
    }
    // .com.shanghai3h.protobuf.SensorData senData = 9;
    case kSenData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.sendata_);
      break;
    }
    // .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
    case kTasks: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.tasks_);
      break;
    }
    // .com.shanghai3h.protobuf.ErrorType error = 5;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
      break;
    }
    // uint32 historyTotal = 6;
    case kHistoryTotal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historytotal());
      break;
    }
    // .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
    case kCatalog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.catalog_);
      break;
    }
    // .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
    case kRawMenu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resp_.rawmenu_);
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SH3H_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.shanghai3h.protobuf.SH3H_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SH3H_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SH3H_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.shanghai3h.protobuf.SH3H_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.shanghai3h.protobuf.SH3H_Response)
    MergeFrom(*source);
  }
}

void SH3H_Response::MergeFrom(const SH3H_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.shanghai3h.protobuf.SH3H_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.resp_case()) {
    case kEcho: {
      set_echo(from.echo());
      break;
    }
    case kBeatcount: {
      set_beatcount(from.beatcount());
      break;
    }
    case kDevInfo: {
      mutable_devinfo()->::com::shanghai3h::protobuf::DeviceInfo::MergeFrom(from.devinfo());
      break;
    }
    case kSensors: {
      mutable_sensors()->::com::shanghai3h::protobuf::SensorInfoList::MergeFrom(from.sensors());
      break;
    }
    case kSenData: {
      mutable_sendata()->::com::shanghai3h::protobuf::SensorData::MergeFrom(from.sendata());
      break;
    }
    case kTasks: {
      mutable_tasks()->::com::shanghai3h::protobuf::TaskInfoList::MergeFrom(from.tasks());
      break;
    }
    case kError: {
      set_error(from.error());
      break;
    }
    case kHistoryTotal: {
      set_historytotal(from.historytotal());
      break;
    }
    case kCatalog: {
      mutable_catalog()->::com::shanghai3h::protobuf::HistoryCatalogue::MergeFrom(from.catalog());
      break;
    }
    case kRawMenu: {
      mutable_rawmenu()->::com::shanghai3h::protobuf::HistoryRawMenu::MergeFrom(from.rawmenu());
      break;
    }
    case RESP_NOT_SET: {
      break;
    }
  }
}

void SH3H_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.shanghai3h.protobuf.SH3H_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SH3H_Response::CopyFrom(const SH3H_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.shanghai3h.protobuf.SH3H_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SH3H_Response::IsInitialized() const {
  return true;
}

void SH3H_Response::Swap(SH3H_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SH3H_Response::InternalSwap(SH3H_Response* other) {
  std::swap(type_, other->type_);
  std::swap(resp_, other->resp_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SH3H_Response::GetMetadata() const {
  protobuf_DLF_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DLF_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SH3H_Response

// .com.shanghai3h.protobuf.ResponseType type = 1;
void SH3H_Response::clear_type() {
  type_ = 0;
}
::com::shanghai3h::protobuf::ResponseType SH3H_Response::type() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.type)
  return static_cast< ::com::shanghai3h::protobuf::ResponseType >(type_);
}
void SH3H_Response::set_type(::com::shanghai3h::protobuf::ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.type)
}

// .com.shanghai3h.protobuf.RequestType echo = 11;
bool SH3H_Response::has_echo() const {
  return resp_case() == kEcho;
}
void SH3H_Response::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
void SH3H_Response::clear_echo() {
  if (has_echo()) {
    resp_.echo_ = 0;
    clear_has_resp();
  }
}
::com::shanghai3h::protobuf::RequestType SH3H_Response::echo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.echo)
  if (has_echo()) {
    return static_cast< ::com::shanghai3h::protobuf::RequestType >(resp_.echo_);
  }
  return static_cast< ::com::shanghai3h::protobuf::RequestType >(0);
}
void SH3H_Response::set_echo(::com::shanghai3h::protobuf::RequestType value) {
  if (!has_echo()) {
    clear_resp();
    set_has_echo();
  }
  resp_.echo_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.echo)
}

// uint32 beatcount = 2;
bool SH3H_Response::has_beatcount() const {
  return resp_case() == kBeatcount;
}
void SH3H_Response::set_has_beatcount() {
  _oneof_case_[0] = kBeatcount;
}
void SH3H_Response::clear_beatcount() {
  if (has_beatcount()) {
    resp_.beatcount_ = 0u;
    clear_has_resp();
  }
}
::google::protobuf::uint32 SH3H_Response::beatcount() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.beatcount)
  if (has_beatcount()) {
    return resp_.beatcount_;
  }
  return 0u;
}
void SH3H_Response::set_beatcount(::google::protobuf::uint32 value) {
  if (!has_beatcount()) {
    clear_resp();
    set_has_beatcount();
  }
  resp_.beatcount_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.beatcount)
}

// .com.shanghai3h.protobuf.DeviceInfo devInfo = 3;
bool SH3H_Response::has_devinfo() const {
  return resp_case() == kDevInfo;
}
void SH3H_Response::set_has_devinfo() {
  _oneof_case_[0] = kDevInfo;
}
void SH3H_Response::clear_devinfo() {
  if (has_devinfo()) {
    delete resp_.devinfo_;
    clear_has_resp();
  }
}
 const ::com::shanghai3h::protobuf::DeviceInfo& SH3H_Response::devinfo() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.devInfo)
  return has_devinfo()
      ? *resp_.devinfo_
      : ::com::shanghai3h::protobuf::DeviceInfo::default_instance();
}
::com::shanghai3h::protobuf::DeviceInfo* SH3H_Response::mutable_devinfo() {
  if (!has_devinfo()) {
    clear_resp();
    set_has_devinfo();
    resp_.devinfo_ = new ::com::shanghai3h::protobuf::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.devInfo)
  return resp_.devinfo_;
}
::com::shanghai3h::protobuf::DeviceInfo* SH3H_Response::release_devinfo() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.devInfo)
  if (has_devinfo()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::DeviceInfo* temp = resp_.devinfo_;
    resp_.devinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Response::set_allocated_devinfo(::com::shanghai3h::protobuf::DeviceInfo* devinfo) {
  clear_resp();
  if (devinfo) {
    set_has_devinfo();
    resp_.devinfo_ = devinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.devInfo)
}

// .com.shanghai3h.protobuf.SensorInfoList sensors = 10;
bool SH3H_Response::has_sensors() const {
  return resp_case() == kSensors;
}
void SH3H_Response::set_has_sensors() {
  _oneof_case_[0] = kSensors;
}
void SH3H_Response::clear_sensors() {
  if (has_sensors()) {
    delete resp_.sensors_;
    clear_has_resp();
  }
}
 const ::com::shanghai3h::protobuf::SensorInfoList& SH3H_Response::sensors() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.sensors)
  return has_sensors()
      ? *resp_.sensors_
      : ::com::shanghai3h::protobuf::SensorInfoList::default_instance();
}
::com::shanghai3h::protobuf::SensorInfoList* SH3H_Response::mutable_sensors() {
  if (!has_sensors()) {
    clear_resp();
    set_has_sensors();
    resp_.sensors_ = new ::com::shanghai3h::protobuf::SensorInfoList;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.sensors)
  return resp_.sensors_;
}
::com::shanghai3h::protobuf::SensorInfoList* SH3H_Response::release_sensors() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.sensors)
  if (has_sensors()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::SensorInfoList* temp = resp_.sensors_;
    resp_.sensors_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Response::set_allocated_sensors(::com::shanghai3h::protobuf::SensorInfoList* sensors) {
  clear_resp();
  if (sensors) {
    set_has_sensors();
    resp_.sensors_ = sensors;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.sensors)
}

// .com.shanghai3h.protobuf.SensorData senData = 9;
bool SH3H_Response::has_sendata() const {
  return resp_case() == kSenData;
}
void SH3H_Response::set_has_sendata() {
  _oneof_case_[0] = kSenData;
}
void SH3H_Response::clear_sendata() {
  if (has_sendata()) {
    delete resp_.sendata_;
    clear_has_resp();
  }
}
 const ::com::shanghai3h::protobuf::SensorData& SH3H_Response::sendata() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.senData)
  return has_sendata()
      ? *resp_.sendata_
      : ::com::shanghai3h::protobuf::SensorData::default_instance();
}
::com::shanghai3h::protobuf::SensorData* SH3H_Response::mutable_sendata() {
  if (!has_sendata()) {
    clear_resp();
    set_has_sendata();
    resp_.sendata_ = new ::com::shanghai3h::protobuf::SensorData;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.senData)
  return resp_.sendata_;
}
::com::shanghai3h::protobuf::SensorData* SH3H_Response::release_sendata() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.senData)
  if (has_sendata()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::SensorData* temp = resp_.sendata_;
    resp_.sendata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Response::set_allocated_sendata(::com::shanghai3h::protobuf::SensorData* sendata) {
  clear_resp();
  if (sendata) {
    set_has_sendata();
    resp_.sendata_ = sendata;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.senData)
}

// .com.shanghai3h.protobuf.TaskInfoList tasks = 4;
bool SH3H_Response::has_tasks() const {
  return resp_case() == kTasks;
}
void SH3H_Response::set_has_tasks() {
  _oneof_case_[0] = kTasks;
}
void SH3H_Response::clear_tasks() {
  if (has_tasks()) {
    delete resp_.tasks_;
    clear_has_resp();
  }
}
 const ::com::shanghai3h::protobuf::TaskInfoList& SH3H_Response::tasks() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.tasks)
  return has_tasks()
      ? *resp_.tasks_
      : ::com::shanghai3h::protobuf::TaskInfoList::default_instance();
}
::com::shanghai3h::protobuf::TaskInfoList* SH3H_Response::mutable_tasks() {
  if (!has_tasks()) {
    clear_resp();
    set_has_tasks();
    resp_.tasks_ = new ::com::shanghai3h::protobuf::TaskInfoList;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.tasks)
  return resp_.tasks_;
}
::com::shanghai3h::protobuf::TaskInfoList* SH3H_Response::release_tasks() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.tasks)
  if (has_tasks()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::TaskInfoList* temp = resp_.tasks_;
    resp_.tasks_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Response::set_allocated_tasks(::com::shanghai3h::protobuf::TaskInfoList* tasks) {
  clear_resp();
  if (tasks) {
    set_has_tasks();
    resp_.tasks_ = tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.tasks)
}

// .com.shanghai3h.protobuf.ErrorType error = 5;
bool SH3H_Response::has_error() const {
  return resp_case() == kError;
}
void SH3H_Response::set_has_error() {
  _oneof_case_[0] = kError;
}
void SH3H_Response::clear_error() {
  if (has_error()) {
    resp_.error_ = 0;
    clear_has_resp();
  }
}
::com::shanghai3h::protobuf::ErrorType SH3H_Response::error() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.error)
  if (has_error()) {
    return static_cast< ::com::shanghai3h::protobuf::ErrorType >(resp_.error_);
  }
  return static_cast< ::com::shanghai3h::protobuf::ErrorType >(0);
}
void SH3H_Response::set_error(::com::shanghai3h::protobuf::ErrorType value) {
  if (!has_error()) {
    clear_resp();
    set_has_error();
  }
  resp_.error_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.error)
}

// uint32 historyTotal = 6;
bool SH3H_Response::has_historytotal() const {
  return resp_case() == kHistoryTotal;
}
void SH3H_Response::set_has_historytotal() {
  _oneof_case_[0] = kHistoryTotal;
}
void SH3H_Response::clear_historytotal() {
  if (has_historytotal()) {
    resp_.historytotal_ = 0u;
    clear_has_resp();
  }
}
::google::protobuf::uint32 SH3H_Response::historytotal() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.historyTotal)
  if (has_historytotal()) {
    return resp_.historytotal_;
  }
  return 0u;
}
void SH3H_Response::set_historytotal(::google::protobuf::uint32 value) {
  if (!has_historytotal()) {
    clear_resp();
    set_has_historytotal();
  }
  resp_.historytotal_ = value;
  // @@protoc_insertion_point(field_set:com.shanghai3h.protobuf.SH3H_Response.historyTotal)
}

// .com.shanghai3h.protobuf.HistoryCatalogue catalog = 7;
bool SH3H_Response::has_catalog() const {
  return resp_case() == kCatalog;
}
void SH3H_Response::set_has_catalog() {
  _oneof_case_[0] = kCatalog;
}
void SH3H_Response::clear_catalog() {
  if (has_catalog()) {
    delete resp_.catalog_;
    clear_has_resp();
  }
}
 const ::com::shanghai3h::protobuf::HistoryCatalogue& SH3H_Response::catalog() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.catalog)
  return has_catalog()
      ? *resp_.catalog_
      : ::com::shanghai3h::protobuf::HistoryCatalogue::default_instance();
}
::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Response::mutable_catalog() {
  if (!has_catalog()) {
    clear_resp();
    set_has_catalog();
    resp_.catalog_ = new ::com::shanghai3h::protobuf::HistoryCatalogue;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.catalog)
  return resp_.catalog_;
}
::com::shanghai3h::protobuf::HistoryCatalogue* SH3H_Response::release_catalog() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.catalog)
  if (has_catalog()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::HistoryCatalogue* temp = resp_.catalog_;
    resp_.catalog_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Response::set_allocated_catalog(::com::shanghai3h::protobuf::HistoryCatalogue* catalog) {
  clear_resp();
  if (catalog) {
    set_has_catalog();
    resp_.catalog_ = catalog;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.catalog)
}

// .com.shanghai3h.protobuf.HistoryRawMenu rawMenu = 8;
bool SH3H_Response::has_rawmenu() const {
  return resp_case() == kRawMenu;
}
void SH3H_Response::set_has_rawmenu() {
  _oneof_case_[0] = kRawMenu;
}
void SH3H_Response::clear_rawmenu() {
  if (has_rawmenu()) {
    delete resp_.rawmenu_;
    clear_has_resp();
  }
}
 const ::com::shanghai3h::protobuf::HistoryRawMenu& SH3H_Response::rawmenu() const {
  // @@protoc_insertion_point(field_get:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
  return has_rawmenu()
      ? *resp_.rawmenu_
      : ::com::shanghai3h::protobuf::HistoryRawMenu::default_instance();
}
::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Response::mutable_rawmenu() {
  if (!has_rawmenu()) {
    clear_resp();
    set_has_rawmenu();
    resp_.rawmenu_ = new ::com::shanghai3h::protobuf::HistoryRawMenu;
  }
  // @@protoc_insertion_point(field_mutable:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
  return resp_.rawmenu_;
}
::com::shanghai3h::protobuf::HistoryRawMenu* SH3H_Response::release_rawmenu() {
  // @@protoc_insertion_point(field_release:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
  if (has_rawmenu()) {
    clear_has_resp();
    ::com::shanghai3h::protobuf::HistoryRawMenu* temp = resp_.rawmenu_;
    resp_.rawmenu_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SH3H_Response::set_allocated_rawmenu(::com::shanghai3h::protobuf::HistoryRawMenu* rawmenu) {
  clear_resp();
  if (rawmenu) {
    set_has_rawmenu();
    resp_.rawmenu_ = rawmenu;
  }
  // @@protoc_insertion_point(field_set_allocated:com.shanghai3h.protobuf.SH3H_Response.rawMenu)
}

bool SH3H_Response::has_resp() const {
  return resp_case() != RESP_NOT_SET;
}
void SH3H_Response::clear_has_resp() {
  _oneof_case_[0] = RESP_NOT_SET;
}
SH3H_Response::RespCase SH3H_Response::resp_case() const {
  return SH3H_Response::RespCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace shanghai3h
}  // namespace com

// @@protoc_insertion_point(global_scope)
